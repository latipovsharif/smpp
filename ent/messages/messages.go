// Code generated by entc, DO NOT EDIT.

package messages

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the messages type in the database.
	Label = "messages"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSequenceNumber holds the string denoting the sequence_number field in the database.
	FieldSequenceNumber = "sequence_number"
	// FieldExternalID holds the string denoting the external_id field in the database.
	FieldExternalID = "external_id"
	// FieldDst holds the string denoting the dst field in the database.
	FieldDst = "dst"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldSrc holds the string denoting the src field in the database.
	FieldSrc = "src"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldSmscMessageID holds the string denoting the smsc_message_id field in the database.
	FieldSmscMessageID = "smsc_message_id"
	// FieldCreateAt holds the string denoting the create_at field in the database.
	FieldCreateAt = "create_at"
	// FieldUpdateAt holds the string denoting the update_at field in the database.
	FieldUpdateAt = "update_at"
	// EdgeUserID holds the string denoting the user_id edge name in mutations.
	EdgeUserID = "user_id"
	// EdgeProviderID holds the string denoting the provider_id edge name in mutations.
	EdgeProviderID = "provider_id"
	// Table holds the table name of the messages in the database.
	Table = "messages"
	// UserIDTable is the table the holds the user_id relation/edge.
	UserIDTable = "messages"
	// UserIDInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserIDInverseTable = "users"
	// UserIDColumn is the table column denoting the user_id relation/edge.
	UserIDColumn = "user_id"
	// ProviderIDTable is the table the holds the provider_id relation/edge.
	ProviderIDTable = "messages"
	// ProviderIDInverseTable is the table name for the Provide entity.
	// It exists in this package in order to avoid circular dependency with the "provide" package.
	ProviderIDInverseTable = "provides"
	// ProviderIDColumn is the table column denoting the provider_id relation/edge.
	ProviderIDColumn = "provider_id"
)

// Columns holds all SQL columns for messages fields.
var Columns = []string{
	FieldID,
	FieldSequenceNumber,
	FieldExternalID,
	FieldDst,
	FieldMessage,
	FieldSrc,
	FieldState,
	FieldSmscMessageID,
	FieldCreateAt,
	FieldUpdateAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "messages"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"provider_id",
	"user_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateAt holds the default value on creation for the "create_at" field.
	DefaultCreateAt func() time.Time
	// DefaultUpdateAt holds the default value on creation for the "update_at" field.
	DefaultUpdateAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
