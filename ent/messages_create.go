// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"smpp/ent/messages"
	"smpp/ent/provide"
	"smpp/ent/user"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// MessagesCreate is the builder for creating a Messages entity.
type MessagesCreate struct {
	config
	mutation *MessagesMutation
	hooks    []Hook
}

// SetSequenceNumber sets the "sequence_number" field.
func (mc *MessagesCreate) SetSequenceNumber(i int32) *MessagesCreate {
	mc.mutation.SetSequenceNumber(i)
	return mc
}

// SetExternalID sets the "external_id" field.
func (mc *MessagesCreate) SetExternalID(s string) *MessagesCreate {
	mc.mutation.SetExternalID(s)
	return mc
}

// SetDst sets the "dst" field.
func (mc *MessagesCreate) SetDst(s string) *MessagesCreate {
	mc.mutation.SetDst(s)
	return mc
}

// SetMessage sets the "message" field.
func (mc *MessagesCreate) SetMessage(s string) *MessagesCreate {
	mc.mutation.SetMessage(s)
	return mc
}

// SetSrc sets the "src" field.
func (mc *MessagesCreate) SetSrc(s string) *MessagesCreate {
	mc.mutation.SetSrc(s)
	return mc
}

// SetState sets the "state" field.
func (mc *MessagesCreate) SetState(i int) *MessagesCreate {
	mc.mutation.SetState(i)
	return mc
}

// SetSmscMessageID sets the "smsc_message_id" field.
func (mc *MessagesCreate) SetSmscMessageID(s string) *MessagesCreate {
	mc.mutation.SetSmscMessageID(s)
	return mc
}

// SetCreateAt sets the "create_at" field.
func (mc *MessagesCreate) SetCreateAt(t time.Time) *MessagesCreate {
	mc.mutation.SetCreateAt(t)
	return mc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (mc *MessagesCreate) SetNillableCreateAt(t *time.Time) *MessagesCreate {
	if t != nil {
		mc.SetCreateAt(*t)
	}
	return mc
}

// SetUpdateAt sets the "update_at" field.
func (mc *MessagesCreate) SetUpdateAt(t time.Time) *MessagesCreate {
	mc.mutation.SetUpdateAt(t)
	return mc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (mc *MessagesCreate) SetNillableUpdateAt(t *time.Time) *MessagesCreate {
	if t != nil {
		mc.SetUpdateAt(*t)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *MessagesCreate) SetID(u uuid.UUID) *MessagesCreate {
	mc.mutation.SetID(u)
	return mc
}

// SetUserIDID sets the "user_id" edge to the User entity by ID.
func (mc *MessagesCreate) SetUserIDID(id uuid.UUID) *MessagesCreate {
	mc.mutation.SetUserIDID(id)
	return mc
}

// SetNillableUserIDID sets the "user_id" edge to the User entity by ID if the given value is not nil.
func (mc *MessagesCreate) SetNillableUserIDID(id *uuid.UUID) *MessagesCreate {
	if id != nil {
		mc = mc.SetUserIDID(*id)
	}
	return mc
}

// SetUserID sets the "user_id" edge to the User entity.
func (mc *MessagesCreate) SetUserID(u *User) *MessagesCreate {
	return mc.SetUserIDID(u.ID)
}

// SetProviderIDID sets the "provider_id" edge to the Provide entity by ID.
func (mc *MessagesCreate) SetProviderIDID(id uuid.UUID) *MessagesCreate {
	mc.mutation.SetProviderIDID(id)
	return mc
}

// SetNillableProviderIDID sets the "provider_id" edge to the Provide entity by ID if the given value is not nil.
func (mc *MessagesCreate) SetNillableProviderIDID(id *uuid.UUID) *MessagesCreate {
	if id != nil {
		mc = mc.SetProviderIDID(*id)
	}
	return mc
}

// SetProviderID sets the "provider_id" edge to the Provide entity.
func (mc *MessagesCreate) SetProviderID(p *Provide) *MessagesCreate {
	return mc.SetProviderIDID(p.ID)
}

// Mutation returns the MessagesMutation object of the builder.
func (mc *MessagesCreate) Mutation() *MessagesMutation {
	return mc.mutation
}

// Save creates the Messages in the database.
func (mc *MessagesCreate) Save(ctx context.Context) (*Messages, error) {
	var (
		err  error
		node *Messages
	)
	mc.defaults()
	if len(mc.hooks) == 0 {
		if err = mc.check(); err != nil {
			return nil, err
		}
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MessagesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mc.check(); err != nil {
				return nil, err
			}
			mc.mutation = mutation
			node, err = mc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			mut = mc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MessagesCreate) SaveX(ctx context.Context) *Messages {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (mc *MessagesCreate) defaults() {
	if _, ok := mc.mutation.CreateAt(); !ok {
		v := messages.DefaultCreateAt()
		mc.mutation.SetCreateAt(v)
	}
	if _, ok := mc.mutation.UpdateAt(); !ok {
		v := messages.DefaultUpdateAt()
		mc.mutation.SetUpdateAt(v)
	}
	if _, ok := mc.mutation.ID(); !ok {
		v := messages.DefaultID()
		mc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MessagesCreate) check() error {
	if _, ok := mc.mutation.SequenceNumber(); !ok {
		return &ValidationError{Name: "sequence_number", err: errors.New("ent: missing required field \"sequence_number\"")}
	}
	if _, ok := mc.mutation.ExternalID(); !ok {
		return &ValidationError{Name: "external_id", err: errors.New("ent: missing required field \"external_id\"")}
	}
	if _, ok := mc.mutation.Dst(); !ok {
		return &ValidationError{Name: "dst", err: errors.New("ent: missing required field \"dst\"")}
	}
	if _, ok := mc.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New("ent: missing required field \"message\"")}
	}
	if _, ok := mc.mutation.Src(); !ok {
		return &ValidationError{Name: "src", err: errors.New("ent: missing required field \"src\"")}
	}
	if _, ok := mc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New("ent: missing required field \"state\"")}
	}
	if _, ok := mc.mutation.SmscMessageID(); !ok {
		return &ValidationError{Name: "smsc_message_id", err: errors.New("ent: missing required field \"smsc_message_id\"")}
	}
	if _, ok := mc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New("ent: missing required field \"create_at\"")}
	}
	if _, ok := mc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New("ent: missing required field \"update_at\"")}
	}
	return nil
}

func (mc *MessagesCreate) sqlSave(ctx context.Context) (*Messages, error) {
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

func (mc *MessagesCreate) createSpec() (*Messages, *sqlgraph.CreateSpec) {
	var (
		_node = &Messages{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: messages.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: messages.FieldID,
			},
		}
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.SequenceNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: messages.FieldSequenceNumber,
		})
		_node.SequenceNumber = value
	}
	if value, ok := mc.mutation.ExternalID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: messages.FieldExternalID,
		})
		_node.ExternalID = value
	}
	if value, ok := mc.mutation.Dst(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: messages.FieldDst,
		})
		_node.Dst = value
	}
	if value, ok := mc.mutation.Message(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: messages.FieldMessage,
		})
		_node.Message = value
	}
	if value, ok := mc.mutation.Src(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: messages.FieldSrc,
		})
		_node.Src = value
	}
	if value, ok := mc.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: messages.FieldState,
		})
		_node.State = value
	}
	if value, ok := mc.mutation.SmscMessageID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: messages.FieldSmscMessageID,
		})
		_node.SmscMessageID = value
	}
	if value, ok := mc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: messages.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := mc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: messages.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if nodes := mc.mutation.UserIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   messages.UserIDTable,
			Columns: []string{messages.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.ProviderIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   messages.ProviderIDTable,
			Columns: []string{messages.ProviderIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provide.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MessagesCreateBulk is the builder for creating many Messages entities in bulk.
type MessagesCreateBulk struct {
	config
	builders []*MessagesCreate
}

// Save creates the Messages entities in the database.
func (mcb *MessagesCreateBulk) Save(ctx context.Context) ([]*Messages, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Messages, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MessagesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MessagesCreateBulk) SaveX(ctx context.Context) []*Messages {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
