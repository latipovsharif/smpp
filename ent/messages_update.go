// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"smpp/ent/messages"
	"smpp/ent/predicate"
	"smpp/ent/provide"
	"smpp/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// MessagesUpdate is the builder for updating Messages entities.
type MessagesUpdate struct {
	config
	hooks    []Hook
	mutation *MessagesMutation
}

// Where adds a new predicate for the MessagesUpdate builder.
func (mu *MessagesUpdate) Where(ps ...predicate.Messages) *MessagesUpdate {
	mu.mutation.predicates = append(mu.mutation.predicates, ps...)
	return mu
}

// SetSequenceNumber sets the "sequence_number" field.
func (mu *MessagesUpdate) SetSequenceNumber(i int32) *MessagesUpdate {
	mu.mutation.ResetSequenceNumber()
	mu.mutation.SetSequenceNumber(i)
	return mu
}

// AddSequenceNumber adds i to the "sequence_number" field.
func (mu *MessagesUpdate) AddSequenceNumber(i int32) *MessagesUpdate {
	mu.mutation.AddSequenceNumber(i)
	return mu
}

// SetExternalID sets the "external_id" field.
func (mu *MessagesUpdate) SetExternalID(s string) *MessagesUpdate {
	mu.mutation.SetExternalID(s)
	return mu
}

// SetDst sets the "dst" field.
func (mu *MessagesUpdate) SetDst(s string) *MessagesUpdate {
	mu.mutation.SetDst(s)
	return mu
}

// SetMessage sets the "message" field.
func (mu *MessagesUpdate) SetMessage(s string) *MessagesUpdate {
	mu.mutation.SetMessage(s)
	return mu
}

// SetSrc sets the "src" field.
func (mu *MessagesUpdate) SetSrc(s string) *MessagesUpdate {
	mu.mutation.SetSrc(s)
	return mu
}

// SetState sets the "state" field.
func (mu *MessagesUpdate) SetState(i int) *MessagesUpdate {
	mu.mutation.ResetState()
	mu.mutation.SetState(i)
	return mu
}

// AddState adds i to the "state" field.
func (mu *MessagesUpdate) AddState(i int) *MessagesUpdate {
	mu.mutation.AddState(i)
	return mu
}

// SetSmscMessageID sets the "smsc_message_id" field.
func (mu *MessagesUpdate) SetSmscMessageID(s string) *MessagesUpdate {
	mu.mutation.SetSmscMessageID(s)
	return mu
}

// SetCreateAt sets the "create_at" field.
func (mu *MessagesUpdate) SetCreateAt(t time.Time) *MessagesUpdate {
	mu.mutation.SetCreateAt(t)
	return mu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (mu *MessagesUpdate) SetNillableCreateAt(t *time.Time) *MessagesUpdate {
	if t != nil {
		mu.SetCreateAt(*t)
	}
	return mu
}

// SetUpdateAt sets the "update_at" field.
func (mu *MessagesUpdate) SetUpdateAt(t time.Time) *MessagesUpdate {
	mu.mutation.SetUpdateAt(t)
	return mu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (mu *MessagesUpdate) SetNillableUpdateAt(t *time.Time) *MessagesUpdate {
	if t != nil {
		mu.SetUpdateAt(*t)
	}
	return mu
}

// SetUserIDID sets the "user_id" edge to the User entity by ID.
func (mu *MessagesUpdate) SetUserIDID(id uuid.UUID) *MessagesUpdate {
	mu.mutation.SetUserIDID(id)
	return mu
}

// SetNillableUserIDID sets the "user_id" edge to the User entity by ID if the given value is not nil.
func (mu *MessagesUpdate) SetNillableUserIDID(id *uuid.UUID) *MessagesUpdate {
	if id != nil {
		mu = mu.SetUserIDID(*id)
	}
	return mu
}

// SetUserID sets the "user_id" edge to the User entity.
func (mu *MessagesUpdate) SetUserID(u *User) *MessagesUpdate {
	return mu.SetUserIDID(u.ID)
}

// SetProviderIDID sets the "provider_id" edge to the Provide entity by ID.
func (mu *MessagesUpdate) SetProviderIDID(id uuid.UUID) *MessagesUpdate {
	mu.mutation.SetProviderIDID(id)
	return mu
}

// SetNillableProviderIDID sets the "provider_id" edge to the Provide entity by ID if the given value is not nil.
func (mu *MessagesUpdate) SetNillableProviderIDID(id *uuid.UUID) *MessagesUpdate {
	if id != nil {
		mu = mu.SetProviderIDID(*id)
	}
	return mu
}

// SetProviderID sets the "provider_id" edge to the Provide entity.
func (mu *MessagesUpdate) SetProviderID(p *Provide) *MessagesUpdate {
	return mu.SetProviderIDID(p.ID)
}

// Mutation returns the MessagesMutation object of the builder.
func (mu *MessagesUpdate) Mutation() *MessagesMutation {
	return mu.mutation
}

// ClearUserID clears the "user_id" edge to the User entity.
func (mu *MessagesUpdate) ClearUserID() *MessagesUpdate {
	mu.mutation.ClearUserID()
	return mu
}

// ClearProviderID clears the "provider_id" edge to the Provide entity.
func (mu *MessagesUpdate) ClearProviderID() *MessagesUpdate {
	mu.mutation.ClearProviderID()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MessagesUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mu.hooks) == 0 {
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MessagesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MessagesUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MessagesUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MessagesUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MessagesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   messages.Table,
			Columns: messages.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: messages.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.SequenceNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: messages.FieldSequenceNumber,
		})
	}
	if value, ok := mu.mutation.AddedSequenceNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: messages.FieldSequenceNumber,
		})
	}
	if value, ok := mu.mutation.ExternalID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: messages.FieldExternalID,
		})
	}
	if value, ok := mu.mutation.Dst(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: messages.FieldDst,
		})
	}
	if value, ok := mu.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: messages.FieldMessage,
		})
	}
	if value, ok := mu.mutation.Src(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: messages.FieldSrc,
		})
	}
	if value, ok := mu.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: messages.FieldState,
		})
	}
	if value, ok := mu.mutation.AddedState(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: messages.FieldState,
		})
	}
	if value, ok := mu.mutation.SmscMessageID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: messages.FieldSmscMessageID,
		})
	}
	if value, ok := mu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: messages.FieldCreateAt,
		})
	}
	if value, ok := mu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: messages.FieldUpdateAt,
		})
	}
	if mu.mutation.UserIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   messages.UserIDTable,
			Columns: []string{messages.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.UserIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   messages.UserIDTable,
			Columns: []string{messages.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ProviderIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   messages.ProviderIDTable,
			Columns: []string{messages.ProviderIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provide.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ProviderIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   messages.ProviderIDTable,
			Columns: []string{messages.ProviderIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provide.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{messages.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MessagesUpdateOne is the builder for updating a single Messages entity.
type MessagesUpdateOne struct {
	config
	hooks    []Hook
	mutation *MessagesMutation
}

// SetSequenceNumber sets the "sequence_number" field.
func (muo *MessagesUpdateOne) SetSequenceNumber(i int32) *MessagesUpdateOne {
	muo.mutation.ResetSequenceNumber()
	muo.mutation.SetSequenceNumber(i)
	return muo
}

// AddSequenceNumber adds i to the "sequence_number" field.
func (muo *MessagesUpdateOne) AddSequenceNumber(i int32) *MessagesUpdateOne {
	muo.mutation.AddSequenceNumber(i)
	return muo
}

// SetExternalID sets the "external_id" field.
func (muo *MessagesUpdateOne) SetExternalID(s string) *MessagesUpdateOne {
	muo.mutation.SetExternalID(s)
	return muo
}

// SetDst sets the "dst" field.
func (muo *MessagesUpdateOne) SetDst(s string) *MessagesUpdateOne {
	muo.mutation.SetDst(s)
	return muo
}

// SetMessage sets the "message" field.
func (muo *MessagesUpdateOne) SetMessage(s string) *MessagesUpdateOne {
	muo.mutation.SetMessage(s)
	return muo
}

// SetSrc sets the "src" field.
func (muo *MessagesUpdateOne) SetSrc(s string) *MessagesUpdateOne {
	muo.mutation.SetSrc(s)
	return muo
}

// SetState sets the "state" field.
func (muo *MessagesUpdateOne) SetState(i int) *MessagesUpdateOne {
	muo.mutation.ResetState()
	muo.mutation.SetState(i)
	return muo
}

// AddState adds i to the "state" field.
func (muo *MessagesUpdateOne) AddState(i int) *MessagesUpdateOne {
	muo.mutation.AddState(i)
	return muo
}

// SetSmscMessageID sets the "smsc_message_id" field.
func (muo *MessagesUpdateOne) SetSmscMessageID(s string) *MessagesUpdateOne {
	muo.mutation.SetSmscMessageID(s)
	return muo
}

// SetCreateAt sets the "create_at" field.
func (muo *MessagesUpdateOne) SetCreateAt(t time.Time) *MessagesUpdateOne {
	muo.mutation.SetCreateAt(t)
	return muo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (muo *MessagesUpdateOne) SetNillableCreateAt(t *time.Time) *MessagesUpdateOne {
	if t != nil {
		muo.SetCreateAt(*t)
	}
	return muo
}

// SetUpdateAt sets the "update_at" field.
func (muo *MessagesUpdateOne) SetUpdateAt(t time.Time) *MessagesUpdateOne {
	muo.mutation.SetUpdateAt(t)
	return muo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (muo *MessagesUpdateOne) SetNillableUpdateAt(t *time.Time) *MessagesUpdateOne {
	if t != nil {
		muo.SetUpdateAt(*t)
	}
	return muo
}

// SetUserIDID sets the "user_id" edge to the User entity by ID.
func (muo *MessagesUpdateOne) SetUserIDID(id uuid.UUID) *MessagesUpdateOne {
	muo.mutation.SetUserIDID(id)
	return muo
}

// SetNillableUserIDID sets the "user_id" edge to the User entity by ID if the given value is not nil.
func (muo *MessagesUpdateOne) SetNillableUserIDID(id *uuid.UUID) *MessagesUpdateOne {
	if id != nil {
		muo = muo.SetUserIDID(*id)
	}
	return muo
}

// SetUserID sets the "user_id" edge to the User entity.
func (muo *MessagesUpdateOne) SetUserID(u *User) *MessagesUpdateOne {
	return muo.SetUserIDID(u.ID)
}

// SetProviderIDID sets the "provider_id" edge to the Provide entity by ID.
func (muo *MessagesUpdateOne) SetProviderIDID(id uuid.UUID) *MessagesUpdateOne {
	muo.mutation.SetProviderIDID(id)
	return muo
}

// SetNillableProviderIDID sets the "provider_id" edge to the Provide entity by ID if the given value is not nil.
func (muo *MessagesUpdateOne) SetNillableProviderIDID(id *uuid.UUID) *MessagesUpdateOne {
	if id != nil {
		muo = muo.SetProviderIDID(*id)
	}
	return muo
}

// SetProviderID sets the "provider_id" edge to the Provide entity.
func (muo *MessagesUpdateOne) SetProviderID(p *Provide) *MessagesUpdateOne {
	return muo.SetProviderIDID(p.ID)
}

// Mutation returns the MessagesMutation object of the builder.
func (muo *MessagesUpdateOne) Mutation() *MessagesMutation {
	return muo.mutation
}

// ClearUserID clears the "user_id" edge to the User entity.
func (muo *MessagesUpdateOne) ClearUserID() *MessagesUpdateOne {
	muo.mutation.ClearUserID()
	return muo
}

// ClearProviderID clears the "provider_id" edge to the Provide entity.
func (muo *MessagesUpdateOne) ClearProviderID() *MessagesUpdateOne {
	muo.mutation.ClearProviderID()
	return muo
}

// Save executes the query and returns the updated Messages entity.
func (muo *MessagesUpdateOne) Save(ctx context.Context) (*Messages, error) {
	var (
		err  error
		node *Messages
	)
	if len(muo.hooks) == 0 {
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MessagesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			mut = muo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MessagesUpdateOne) SaveX(ctx context.Context) *Messages {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MessagesUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MessagesUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MessagesUpdateOne) sqlSave(ctx context.Context) (_node *Messages, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   messages.Table,
			Columns: messages.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: messages.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Messages.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.SequenceNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: messages.FieldSequenceNumber,
		})
	}
	if value, ok := muo.mutation.AddedSequenceNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: messages.FieldSequenceNumber,
		})
	}
	if value, ok := muo.mutation.ExternalID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: messages.FieldExternalID,
		})
	}
	if value, ok := muo.mutation.Dst(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: messages.FieldDst,
		})
	}
	if value, ok := muo.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: messages.FieldMessage,
		})
	}
	if value, ok := muo.mutation.Src(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: messages.FieldSrc,
		})
	}
	if value, ok := muo.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: messages.FieldState,
		})
	}
	if value, ok := muo.mutation.AddedState(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: messages.FieldState,
		})
	}
	if value, ok := muo.mutation.SmscMessageID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: messages.FieldSmscMessageID,
		})
	}
	if value, ok := muo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: messages.FieldCreateAt,
		})
	}
	if value, ok := muo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: messages.FieldUpdateAt,
		})
	}
	if muo.mutation.UserIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   messages.UserIDTable,
			Columns: []string{messages.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.UserIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   messages.UserIDTable,
			Columns: []string{messages.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ProviderIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   messages.ProviderIDTable,
			Columns: []string{messages.ProviderIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provide.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ProviderIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   messages.ProviderIDTable,
			Columns: []string{messages.ProviderIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provide.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Messages{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{messages.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
