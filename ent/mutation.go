// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"smpp/ent/messages"
	"smpp/ent/predicate"
	"smpp/ent/price"
	"smpp/ent/provide"
	"smpp/ent/rate"
	"smpp/ent/rateprice"
	"smpp/ent/user"
	"smpp/ent/usermonthmessage"
	"sync"
	"time"

	"github.com/facebook/ent"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeMessages         = "Messages"
	TypePrice            = "Price"
	TypeProvide          = "Provide"
	TypeRate             = "Rate"
	TypeRatePrice        = "RatePrice"
	TypeUser             = "User"
	TypeUserMonthMessage = "UserMonthMessage"
)

// MessagesMutation represents an operation that mutates the Messages nodes in the graph.
type MessagesMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	sequence_number    *int32
	addsequence_number *int32
	external_id        *string
	dst                *string
	message            *string
	src                *string
	state              *int32
	addstate           *int32
	smsc_message_id    *int32
	addsmsc_message_id *int32
	create_at          *time.Time
	update_at          *time.Time
	clearedFields      map[string]struct{}
	user_id            *uuid.UUID
	cleareduser_id     bool
	provider_id        *uuid.UUID
	clearedprovider_id bool
	done               bool
	oldValue           func(context.Context) (*Messages, error)
	predicates         []predicate.Messages
}

var _ ent.Mutation = (*MessagesMutation)(nil)

// messagesOption allows management of the mutation configuration using functional options.
type messagesOption func(*MessagesMutation)

// newMessagesMutation creates new mutation for the Messages entity.
func newMessagesMutation(c config, op Op, opts ...messagesOption) *MessagesMutation {
	m := &MessagesMutation{
		config:        c,
		op:            op,
		typ:           TypeMessages,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMessagesID sets the ID field of the mutation.
func withMessagesID(id uuid.UUID) messagesOption {
	return func(m *MessagesMutation) {
		var (
			err   error
			once  sync.Once
			value *Messages
		)
		m.oldValue = func(ctx context.Context) (*Messages, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Messages.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMessages sets the old Messages of the mutation.
func withMessages(node *Messages) messagesOption {
	return func(m *MessagesMutation) {
		m.oldValue = func(context.Context) (*Messages, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MessagesMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MessagesMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Messages entities.
func (m *MessagesMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *MessagesMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetSequenceNumber sets the "sequence_number" field.
func (m *MessagesMutation) SetSequenceNumber(i int32) {
	m.sequence_number = &i
	m.addsequence_number = nil
}

// SequenceNumber returns the value of the "sequence_number" field in the mutation.
func (m *MessagesMutation) SequenceNumber() (r int32, exists bool) {
	v := m.sequence_number
	if v == nil {
		return
	}
	return *v, true
}

// OldSequenceNumber returns the old "sequence_number" field's value of the Messages entity.
// If the Messages object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessagesMutation) OldSequenceNumber(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSequenceNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSequenceNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSequenceNumber: %w", err)
	}
	return oldValue.SequenceNumber, nil
}

// AddSequenceNumber adds i to the "sequence_number" field.
func (m *MessagesMutation) AddSequenceNumber(i int32) {
	if m.addsequence_number != nil {
		*m.addsequence_number += i
	} else {
		m.addsequence_number = &i
	}
}

// AddedSequenceNumber returns the value that was added to the "sequence_number" field in this mutation.
func (m *MessagesMutation) AddedSequenceNumber() (r int32, exists bool) {
	v := m.addsequence_number
	if v == nil {
		return
	}
	return *v, true
}

// ResetSequenceNumber resets all changes to the "sequence_number" field.
func (m *MessagesMutation) ResetSequenceNumber() {
	m.sequence_number = nil
	m.addsequence_number = nil
}

// SetExternalID sets the "external_id" field.
func (m *MessagesMutation) SetExternalID(s string) {
	m.external_id = &s
}

// ExternalID returns the value of the "external_id" field in the mutation.
func (m *MessagesMutation) ExternalID() (r string, exists bool) {
	v := m.external_id
	if v == nil {
		return
	}
	return *v, true
}

// OldExternalID returns the old "external_id" field's value of the Messages entity.
// If the Messages object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessagesMutation) OldExternalID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldExternalID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldExternalID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExternalID: %w", err)
	}
	return oldValue.ExternalID, nil
}

// ResetExternalID resets all changes to the "external_id" field.
func (m *MessagesMutation) ResetExternalID() {
	m.external_id = nil
}

// SetDst sets the "dst" field.
func (m *MessagesMutation) SetDst(s string) {
	m.dst = &s
}

// Dst returns the value of the "dst" field in the mutation.
func (m *MessagesMutation) Dst() (r string, exists bool) {
	v := m.dst
	if v == nil {
		return
	}
	return *v, true
}

// OldDst returns the old "dst" field's value of the Messages entity.
// If the Messages object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessagesMutation) OldDst(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDst is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDst requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDst: %w", err)
	}
	return oldValue.Dst, nil
}

// ResetDst resets all changes to the "dst" field.
func (m *MessagesMutation) ResetDst() {
	m.dst = nil
}

// SetMessage sets the "message" field.
func (m *MessagesMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *MessagesMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the Messages entity.
// If the Messages object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessagesMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ResetMessage resets all changes to the "message" field.
func (m *MessagesMutation) ResetMessage() {
	m.message = nil
}

// SetSrc sets the "src" field.
func (m *MessagesMutation) SetSrc(s string) {
	m.src = &s
}

// Src returns the value of the "src" field in the mutation.
func (m *MessagesMutation) Src() (r string, exists bool) {
	v := m.src
	if v == nil {
		return
	}
	return *v, true
}

// OldSrc returns the old "src" field's value of the Messages entity.
// If the Messages object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessagesMutation) OldSrc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSrc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSrc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSrc: %w", err)
	}
	return oldValue.Src, nil
}

// ResetSrc resets all changes to the "src" field.
func (m *MessagesMutation) ResetSrc() {
	m.src = nil
}

// SetState sets the "state" field.
func (m *MessagesMutation) SetState(i int32) {
	m.state = &i
	m.addstate = nil
}

// State returns the value of the "state" field in the mutation.
func (m *MessagesMutation) State() (r int32, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the Messages entity.
// If the Messages object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessagesMutation) OldState(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// AddState adds i to the "state" field.
func (m *MessagesMutation) AddState(i int32) {
	if m.addstate != nil {
		*m.addstate += i
	} else {
		m.addstate = &i
	}
}

// AddedState returns the value that was added to the "state" field in this mutation.
func (m *MessagesMutation) AddedState() (r int32, exists bool) {
	v := m.addstate
	if v == nil {
		return
	}
	return *v, true
}

// ResetState resets all changes to the "state" field.
func (m *MessagesMutation) ResetState() {
	m.state = nil
	m.addstate = nil
}

// SetSmscMessageID sets the "smsc_message_id" field.
func (m *MessagesMutation) SetSmscMessageID(i int32) {
	m.smsc_message_id = &i
	m.addsmsc_message_id = nil
}

// SmscMessageID returns the value of the "smsc_message_id" field in the mutation.
func (m *MessagesMutation) SmscMessageID() (r int32, exists bool) {
	v := m.smsc_message_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSmscMessageID returns the old "smsc_message_id" field's value of the Messages entity.
// If the Messages object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessagesMutation) OldSmscMessageID(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSmscMessageID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSmscMessageID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSmscMessageID: %w", err)
	}
	return oldValue.SmscMessageID, nil
}

// AddSmscMessageID adds i to the "smsc_message_id" field.
func (m *MessagesMutation) AddSmscMessageID(i int32) {
	if m.addsmsc_message_id != nil {
		*m.addsmsc_message_id += i
	} else {
		m.addsmsc_message_id = &i
	}
}

// AddedSmscMessageID returns the value that was added to the "smsc_message_id" field in this mutation.
func (m *MessagesMutation) AddedSmscMessageID() (r int32, exists bool) {
	v := m.addsmsc_message_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetSmscMessageID resets all changes to the "smsc_message_id" field.
func (m *MessagesMutation) ResetSmscMessageID() {
	m.smsc_message_id = nil
	m.addsmsc_message_id = nil
}

// SetCreateAt sets the "create_at" field.
func (m *MessagesMutation) SetCreateAt(t time.Time) {
	m.create_at = &t
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *MessagesMutation) CreateAt() (r time.Time, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the Messages entity.
// If the Messages object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessagesMutation) OldCreateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *MessagesMutation) ResetCreateAt() {
	m.create_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *MessagesMutation) SetUpdateAt(t time.Time) {
	m.update_at = &t
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *MessagesMutation) UpdateAt() (r time.Time, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the Messages entity.
// If the Messages object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessagesMutation) OldUpdateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *MessagesMutation) ResetUpdateAt() {
	m.update_at = nil
}

// SetUserIDID sets the "user_id" edge to the User entity by id.
func (m *MessagesMutation) SetUserIDID(id uuid.UUID) {
	m.user_id = &id
}

// ClearUserID clears the "user_id" edge to the User entity.
func (m *MessagesMutation) ClearUserID() {
	m.cleareduser_id = true
}

// UserIDCleared returns if the "user_id" edge to the User entity was cleared.
func (m *MessagesMutation) UserIDCleared() bool {
	return m.cleareduser_id
}

// UserIDID returns the "user_id" edge ID in the mutation.
func (m *MessagesMutation) UserIDID() (id uuid.UUID, exists bool) {
	if m.user_id != nil {
		return *m.user_id, true
	}
	return
}

// UserIDIDs returns the "user_id" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserIDID instead. It exists only for internal usage by the builders.
func (m *MessagesMutation) UserIDIDs() (ids []uuid.UUID) {
	if id := m.user_id; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUserID resets all changes to the "user_id" edge.
func (m *MessagesMutation) ResetUserID() {
	m.user_id = nil
	m.cleareduser_id = false
}

// SetProviderIDID sets the "provider_id" edge to the Provide entity by id.
func (m *MessagesMutation) SetProviderIDID(id uuid.UUID) {
	m.provider_id = &id
}

// ClearProviderID clears the "provider_id" edge to the Provide entity.
func (m *MessagesMutation) ClearProviderID() {
	m.clearedprovider_id = true
}

// ProviderIDCleared returns if the "provider_id" edge to the Provide entity was cleared.
func (m *MessagesMutation) ProviderIDCleared() bool {
	return m.clearedprovider_id
}

// ProviderIDID returns the "provider_id" edge ID in the mutation.
func (m *MessagesMutation) ProviderIDID() (id uuid.UUID, exists bool) {
	if m.provider_id != nil {
		return *m.provider_id, true
	}
	return
}

// ProviderIDIDs returns the "provider_id" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProviderIDID instead. It exists only for internal usage by the builders.
func (m *MessagesMutation) ProviderIDIDs() (ids []uuid.UUID) {
	if id := m.provider_id; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProviderID resets all changes to the "provider_id" edge.
func (m *MessagesMutation) ResetProviderID() {
	m.provider_id = nil
	m.clearedprovider_id = false
}

// Op returns the operation name.
func (m *MessagesMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Messages).
func (m *MessagesMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MessagesMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.sequence_number != nil {
		fields = append(fields, messages.FieldSequenceNumber)
	}
	if m.external_id != nil {
		fields = append(fields, messages.FieldExternalID)
	}
	if m.dst != nil {
		fields = append(fields, messages.FieldDst)
	}
	if m.message != nil {
		fields = append(fields, messages.FieldMessage)
	}
	if m.src != nil {
		fields = append(fields, messages.FieldSrc)
	}
	if m.state != nil {
		fields = append(fields, messages.FieldState)
	}
	if m.smsc_message_id != nil {
		fields = append(fields, messages.FieldSmscMessageID)
	}
	if m.create_at != nil {
		fields = append(fields, messages.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, messages.FieldUpdateAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MessagesMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case messages.FieldSequenceNumber:
		return m.SequenceNumber()
	case messages.FieldExternalID:
		return m.ExternalID()
	case messages.FieldDst:
		return m.Dst()
	case messages.FieldMessage:
		return m.Message()
	case messages.FieldSrc:
		return m.Src()
	case messages.FieldState:
		return m.State()
	case messages.FieldSmscMessageID:
		return m.SmscMessageID()
	case messages.FieldCreateAt:
		return m.CreateAt()
	case messages.FieldUpdateAt:
		return m.UpdateAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MessagesMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case messages.FieldSequenceNumber:
		return m.OldSequenceNumber(ctx)
	case messages.FieldExternalID:
		return m.OldExternalID(ctx)
	case messages.FieldDst:
		return m.OldDst(ctx)
	case messages.FieldMessage:
		return m.OldMessage(ctx)
	case messages.FieldSrc:
		return m.OldSrc(ctx)
	case messages.FieldState:
		return m.OldState(ctx)
	case messages.FieldSmscMessageID:
		return m.OldSmscMessageID(ctx)
	case messages.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case messages.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	}
	return nil, fmt.Errorf("unknown Messages field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessagesMutation) SetField(name string, value ent.Value) error {
	switch name {
	case messages.FieldSequenceNumber:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSequenceNumber(v)
		return nil
	case messages.FieldExternalID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExternalID(v)
		return nil
	case messages.FieldDst:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDst(v)
		return nil
	case messages.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	case messages.FieldSrc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSrc(v)
		return nil
	case messages.FieldState:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case messages.FieldSmscMessageID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSmscMessageID(v)
		return nil
	case messages.FieldCreateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case messages.FieldUpdateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	}
	return fmt.Errorf("unknown Messages field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MessagesMutation) AddedFields() []string {
	var fields []string
	if m.addsequence_number != nil {
		fields = append(fields, messages.FieldSequenceNumber)
	}
	if m.addstate != nil {
		fields = append(fields, messages.FieldState)
	}
	if m.addsmsc_message_id != nil {
		fields = append(fields, messages.FieldSmscMessageID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MessagesMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case messages.FieldSequenceNumber:
		return m.AddedSequenceNumber()
	case messages.FieldState:
		return m.AddedState()
	case messages.FieldSmscMessageID:
		return m.AddedSmscMessageID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessagesMutation) AddField(name string, value ent.Value) error {
	switch name {
	case messages.FieldSequenceNumber:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSequenceNumber(v)
		return nil
	case messages.FieldState:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddState(v)
		return nil
	case messages.FieldSmscMessageID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSmscMessageID(v)
		return nil
	}
	return fmt.Errorf("unknown Messages numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MessagesMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MessagesMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MessagesMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Messages nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MessagesMutation) ResetField(name string) error {
	switch name {
	case messages.FieldSequenceNumber:
		m.ResetSequenceNumber()
		return nil
	case messages.FieldExternalID:
		m.ResetExternalID()
		return nil
	case messages.FieldDst:
		m.ResetDst()
		return nil
	case messages.FieldMessage:
		m.ResetMessage()
		return nil
	case messages.FieldSrc:
		m.ResetSrc()
		return nil
	case messages.FieldState:
		m.ResetState()
		return nil
	case messages.FieldSmscMessageID:
		m.ResetSmscMessageID()
		return nil
	case messages.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case messages.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	}
	return fmt.Errorf("unknown Messages field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MessagesMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user_id != nil {
		edges = append(edges, messages.EdgeUserID)
	}
	if m.provider_id != nil {
		edges = append(edges, messages.EdgeProviderID)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MessagesMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case messages.EdgeUserID:
		if id := m.user_id; id != nil {
			return []ent.Value{*id}
		}
	case messages.EdgeProviderID:
		if id := m.provider_id; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MessagesMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MessagesMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MessagesMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser_id {
		edges = append(edges, messages.EdgeUserID)
	}
	if m.clearedprovider_id {
		edges = append(edges, messages.EdgeProviderID)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MessagesMutation) EdgeCleared(name string) bool {
	switch name {
	case messages.EdgeUserID:
		return m.cleareduser_id
	case messages.EdgeProviderID:
		return m.clearedprovider_id
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MessagesMutation) ClearEdge(name string) error {
	switch name {
	case messages.EdgeUserID:
		m.ClearUserID()
		return nil
	case messages.EdgeProviderID:
		m.ClearProviderID()
		return nil
	}
	return fmt.Errorf("unknown Messages unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MessagesMutation) ResetEdge(name string) error {
	switch name {
	case messages.EdgeUserID:
		m.ResetUserID()
		return nil
	case messages.EdgeProviderID:
		m.ResetProviderID()
		return nil
	}
	return fmt.Errorf("unknown Messages edge %s", name)
}

// PriceMutation represents an operation that mutates the Price nodes in the graph.
type PriceMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	min             *int32
	addmin          *int32
	max             *int32
	addmax          *int32
	price           *string
	create_at       *time.Time
	update_at       *time.Time
	clearedFields   map[string]struct{}
	price_id        map[uuid.UUID]struct{}
	removedprice_id map[uuid.UUID]struct{}
	clearedprice_id bool
	done            bool
	oldValue        func(context.Context) (*Price, error)
	predicates      []predicate.Price
}

var _ ent.Mutation = (*PriceMutation)(nil)

// priceOption allows management of the mutation configuration using functional options.
type priceOption func(*PriceMutation)

// newPriceMutation creates new mutation for the Price entity.
func newPriceMutation(c config, op Op, opts ...priceOption) *PriceMutation {
	m := &PriceMutation{
		config:        c,
		op:            op,
		typ:           TypePrice,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPriceID sets the ID field of the mutation.
func withPriceID(id uuid.UUID) priceOption {
	return func(m *PriceMutation) {
		var (
			err   error
			once  sync.Once
			value *Price
		)
		m.oldValue = func(ctx context.Context) (*Price, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Price.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPrice sets the old Price of the mutation.
func withPrice(node *Price) priceOption {
	return func(m *PriceMutation) {
		m.oldValue = func(context.Context) (*Price, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PriceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PriceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Price entities.
func (m *PriceMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *PriceMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetMin sets the "min" field.
func (m *PriceMutation) SetMin(i int32) {
	m.min = &i
	m.addmin = nil
}

// Min returns the value of the "min" field in the mutation.
func (m *PriceMutation) Min() (r int32, exists bool) {
	v := m.min
	if v == nil {
		return
	}
	return *v, true
}

// OldMin returns the old "min" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldMin(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMin: %w", err)
	}
	return oldValue.Min, nil
}

// AddMin adds i to the "min" field.
func (m *PriceMutation) AddMin(i int32) {
	if m.addmin != nil {
		*m.addmin += i
	} else {
		m.addmin = &i
	}
}

// AddedMin returns the value that was added to the "min" field in this mutation.
func (m *PriceMutation) AddedMin() (r int32, exists bool) {
	v := m.addmin
	if v == nil {
		return
	}
	return *v, true
}

// ResetMin resets all changes to the "min" field.
func (m *PriceMutation) ResetMin() {
	m.min = nil
	m.addmin = nil
}

// SetMax sets the "max" field.
func (m *PriceMutation) SetMax(i int32) {
	m.max = &i
	m.addmax = nil
}

// Max returns the value of the "max" field in the mutation.
func (m *PriceMutation) Max() (r int32, exists bool) {
	v := m.max
	if v == nil {
		return
	}
	return *v, true
}

// OldMax returns the old "max" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldMax(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMax is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMax requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMax: %w", err)
	}
	return oldValue.Max, nil
}

// AddMax adds i to the "max" field.
func (m *PriceMutation) AddMax(i int32) {
	if m.addmax != nil {
		*m.addmax += i
	} else {
		m.addmax = &i
	}
}

// AddedMax returns the value that was added to the "max" field in this mutation.
func (m *PriceMutation) AddedMax() (r int32, exists bool) {
	v := m.addmax
	if v == nil {
		return
	}
	return *v, true
}

// ResetMax resets all changes to the "max" field.
func (m *PriceMutation) ResetMax() {
	m.max = nil
	m.addmax = nil
}

// SetPrice sets the "price" field.
func (m *PriceMutation) SetPrice(s string) {
	m.price = &s
}

// Price returns the value of the "price" field in the mutation.
func (m *PriceMutation) Price() (r string, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldPrice(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// ResetPrice resets all changes to the "price" field.
func (m *PriceMutation) ResetPrice() {
	m.price = nil
}

// SetCreateAt sets the "create_at" field.
func (m *PriceMutation) SetCreateAt(t time.Time) {
	m.create_at = &t
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *PriceMutation) CreateAt() (r time.Time, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldCreateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *PriceMutation) ResetCreateAt() {
	m.create_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *PriceMutation) SetUpdateAt(t time.Time) {
	m.update_at = &t
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *PriceMutation) UpdateAt() (r time.Time, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldUpdateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *PriceMutation) ResetUpdateAt() {
	m.update_at = nil
}

// AddPriceIDIDs adds the "price_id" edge to the RatePrice entity by ids.
func (m *PriceMutation) AddPriceIDIDs(ids ...uuid.UUID) {
	if m.price_id == nil {
		m.price_id = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.price_id[ids[i]] = struct{}{}
	}
}

// ClearPriceID clears the "price_id" edge to the RatePrice entity.
func (m *PriceMutation) ClearPriceID() {
	m.clearedprice_id = true
}

// PriceIDCleared returns if the "price_id" edge to the RatePrice entity was cleared.
func (m *PriceMutation) PriceIDCleared() bool {
	return m.clearedprice_id
}

// RemovePriceIDIDs removes the "price_id" edge to the RatePrice entity by IDs.
func (m *PriceMutation) RemovePriceIDIDs(ids ...uuid.UUID) {
	if m.removedprice_id == nil {
		m.removedprice_id = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.removedprice_id[ids[i]] = struct{}{}
	}
}

// RemovedPriceID returns the removed IDs of the "price_id" edge to the RatePrice entity.
func (m *PriceMutation) RemovedPriceIDIDs() (ids []uuid.UUID) {
	for id := range m.removedprice_id {
		ids = append(ids, id)
	}
	return
}

// PriceIDIDs returns the "price_id" edge IDs in the mutation.
func (m *PriceMutation) PriceIDIDs() (ids []uuid.UUID) {
	for id := range m.price_id {
		ids = append(ids, id)
	}
	return
}

// ResetPriceID resets all changes to the "price_id" edge.
func (m *PriceMutation) ResetPriceID() {
	m.price_id = nil
	m.clearedprice_id = false
	m.removedprice_id = nil
}

// Op returns the operation name.
func (m *PriceMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Price).
func (m *PriceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PriceMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.min != nil {
		fields = append(fields, price.FieldMin)
	}
	if m.max != nil {
		fields = append(fields, price.FieldMax)
	}
	if m.price != nil {
		fields = append(fields, price.FieldPrice)
	}
	if m.create_at != nil {
		fields = append(fields, price.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, price.FieldUpdateAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PriceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case price.FieldMin:
		return m.Min()
	case price.FieldMax:
		return m.Max()
	case price.FieldPrice:
		return m.Price()
	case price.FieldCreateAt:
		return m.CreateAt()
	case price.FieldUpdateAt:
		return m.UpdateAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PriceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case price.FieldMin:
		return m.OldMin(ctx)
	case price.FieldMax:
		return m.OldMax(ctx)
	case price.FieldPrice:
		return m.OldPrice(ctx)
	case price.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case price.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	}
	return nil, fmt.Errorf("unknown Price field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PriceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case price.FieldMin:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMin(v)
		return nil
	case price.FieldMax:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMax(v)
		return nil
	case price.FieldPrice:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case price.FieldCreateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case price.FieldUpdateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	}
	return fmt.Errorf("unknown Price field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PriceMutation) AddedFields() []string {
	var fields []string
	if m.addmin != nil {
		fields = append(fields, price.FieldMin)
	}
	if m.addmax != nil {
		fields = append(fields, price.FieldMax)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PriceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case price.FieldMin:
		return m.AddedMin()
	case price.FieldMax:
		return m.AddedMax()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PriceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case price.FieldMin:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMin(v)
		return nil
	case price.FieldMax:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMax(v)
		return nil
	}
	return fmt.Errorf("unknown Price numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PriceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PriceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PriceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Price nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PriceMutation) ResetField(name string) error {
	switch name {
	case price.FieldMin:
		m.ResetMin()
		return nil
	case price.FieldMax:
		m.ResetMax()
		return nil
	case price.FieldPrice:
		m.ResetPrice()
		return nil
	case price.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case price.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	}
	return fmt.Errorf("unknown Price field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PriceMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.price_id != nil {
		edges = append(edges, price.EdgePriceID)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PriceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case price.EdgePriceID:
		ids := make([]ent.Value, 0, len(m.price_id))
		for id := range m.price_id {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PriceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedprice_id != nil {
		edges = append(edges, price.EdgePriceID)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PriceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case price.EdgePriceID:
		ids := make([]ent.Value, 0, len(m.removedprice_id))
		for id := range m.removedprice_id {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PriceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedprice_id {
		edges = append(edges, price.EdgePriceID)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PriceMutation) EdgeCleared(name string) bool {
	switch name {
	case price.EdgePriceID:
		return m.clearedprice_id
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PriceMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Price unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PriceMutation) ResetEdge(name string) error {
	switch name {
	case price.EdgePriceID:
		m.ResetPriceID()
		return nil
	}
	return fmt.Errorf("unknown Price edge %s", name)
}

// ProvideMutation represents an operation that mutates the Provide nodes in the graph.
type ProvideMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	name               *string
	ip_adres           *string
	create_at          *time.Time
	update_at          *time.Time
	clearedFields      map[string]struct{}
	provider_id        map[uuid.UUID]struct{}
	removedprovider_id map[uuid.UUID]struct{}
	clearedprovider_id bool
	messages           map[uuid.UUID]struct{}
	removedmessages    map[uuid.UUID]struct{}
	clearedmessages    bool
	done               bool
	oldValue           func(context.Context) (*Provide, error)
	predicates         []predicate.Provide
}

var _ ent.Mutation = (*ProvideMutation)(nil)

// provideOption allows management of the mutation configuration using functional options.
type provideOption func(*ProvideMutation)

// newProvideMutation creates new mutation for the Provide entity.
func newProvideMutation(c config, op Op, opts ...provideOption) *ProvideMutation {
	m := &ProvideMutation{
		config:        c,
		op:            op,
		typ:           TypeProvide,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProvideID sets the ID field of the mutation.
func withProvideID(id uuid.UUID) provideOption {
	return func(m *ProvideMutation) {
		var (
			err   error
			once  sync.Once
			value *Provide
		)
		m.oldValue = func(ctx context.Context) (*Provide, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Provide.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProvide sets the old Provide of the mutation.
func withProvide(node *Provide) provideOption {
	return func(m *ProvideMutation) {
		m.oldValue = func(context.Context) (*Provide, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProvideMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProvideMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Provide entities.
func (m *ProvideMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *ProvideMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *ProvideMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ProvideMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Provide entity.
// If the Provide object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProvideMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ProvideMutation) ResetName() {
	m.name = nil
}

// SetIPAdres sets the "ip_adres" field.
func (m *ProvideMutation) SetIPAdres(s string) {
	m.ip_adres = &s
}

// IPAdres returns the value of the "ip_adres" field in the mutation.
func (m *ProvideMutation) IPAdres() (r string, exists bool) {
	v := m.ip_adres
	if v == nil {
		return
	}
	return *v, true
}

// OldIPAdres returns the old "ip_adres" field's value of the Provide entity.
// If the Provide object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProvideMutation) OldIPAdres(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIPAdres is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIPAdres requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIPAdres: %w", err)
	}
	return oldValue.IPAdres, nil
}

// ResetIPAdres resets all changes to the "ip_adres" field.
func (m *ProvideMutation) ResetIPAdres() {
	m.ip_adres = nil
}

// SetCreateAt sets the "create_at" field.
func (m *ProvideMutation) SetCreateAt(t time.Time) {
	m.create_at = &t
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *ProvideMutation) CreateAt() (r time.Time, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the Provide entity.
// If the Provide object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProvideMutation) OldCreateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *ProvideMutation) ResetCreateAt() {
	m.create_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *ProvideMutation) SetUpdateAt(t time.Time) {
	m.update_at = &t
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *ProvideMutation) UpdateAt() (r time.Time, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the Provide entity.
// If the Provide object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProvideMutation) OldUpdateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *ProvideMutation) ResetUpdateAt() {
	m.update_at = nil
}

// AddProviderIDIDs adds the "provider_id" edge to the UserMonthMessage entity by ids.
func (m *ProvideMutation) AddProviderIDIDs(ids ...uuid.UUID) {
	if m.provider_id == nil {
		m.provider_id = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.provider_id[ids[i]] = struct{}{}
	}
}

// ClearProviderID clears the "provider_id" edge to the UserMonthMessage entity.
func (m *ProvideMutation) ClearProviderID() {
	m.clearedprovider_id = true
}

// ProviderIDCleared returns if the "provider_id" edge to the UserMonthMessage entity was cleared.
func (m *ProvideMutation) ProviderIDCleared() bool {
	return m.clearedprovider_id
}

// RemoveProviderIDIDs removes the "provider_id" edge to the UserMonthMessage entity by IDs.
func (m *ProvideMutation) RemoveProviderIDIDs(ids ...uuid.UUID) {
	if m.removedprovider_id == nil {
		m.removedprovider_id = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.removedprovider_id[ids[i]] = struct{}{}
	}
}

// RemovedProviderID returns the removed IDs of the "provider_id" edge to the UserMonthMessage entity.
func (m *ProvideMutation) RemovedProviderIDIDs() (ids []uuid.UUID) {
	for id := range m.removedprovider_id {
		ids = append(ids, id)
	}
	return
}

// ProviderIDIDs returns the "provider_id" edge IDs in the mutation.
func (m *ProvideMutation) ProviderIDIDs() (ids []uuid.UUID) {
	for id := range m.provider_id {
		ids = append(ids, id)
	}
	return
}

// ResetProviderID resets all changes to the "provider_id" edge.
func (m *ProvideMutation) ResetProviderID() {
	m.provider_id = nil
	m.clearedprovider_id = false
	m.removedprovider_id = nil
}

// AddMessageIDs adds the "messages" edge to the Messages entity by ids.
func (m *ProvideMutation) AddMessageIDs(ids ...uuid.UUID) {
	if m.messages == nil {
		m.messages = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.messages[ids[i]] = struct{}{}
	}
}

// ClearMessages clears the "messages" edge to the Messages entity.
func (m *ProvideMutation) ClearMessages() {
	m.clearedmessages = true
}

// MessagesCleared returns if the "messages" edge to the Messages entity was cleared.
func (m *ProvideMutation) MessagesCleared() bool {
	return m.clearedmessages
}

// RemoveMessageIDs removes the "messages" edge to the Messages entity by IDs.
func (m *ProvideMutation) RemoveMessageIDs(ids ...uuid.UUID) {
	if m.removedmessages == nil {
		m.removedmessages = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.removedmessages[ids[i]] = struct{}{}
	}
}

// RemovedMessages returns the removed IDs of the "messages" edge to the Messages entity.
func (m *ProvideMutation) RemovedMessagesIDs() (ids []uuid.UUID) {
	for id := range m.removedmessages {
		ids = append(ids, id)
	}
	return
}

// MessagesIDs returns the "messages" edge IDs in the mutation.
func (m *ProvideMutation) MessagesIDs() (ids []uuid.UUID) {
	for id := range m.messages {
		ids = append(ids, id)
	}
	return
}

// ResetMessages resets all changes to the "messages" edge.
func (m *ProvideMutation) ResetMessages() {
	m.messages = nil
	m.clearedmessages = false
	m.removedmessages = nil
}

// Op returns the operation name.
func (m *ProvideMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Provide).
func (m *ProvideMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProvideMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, provide.FieldName)
	}
	if m.ip_adres != nil {
		fields = append(fields, provide.FieldIPAdres)
	}
	if m.create_at != nil {
		fields = append(fields, provide.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, provide.FieldUpdateAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProvideMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case provide.FieldName:
		return m.Name()
	case provide.FieldIPAdres:
		return m.IPAdres()
	case provide.FieldCreateAt:
		return m.CreateAt()
	case provide.FieldUpdateAt:
		return m.UpdateAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProvideMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case provide.FieldName:
		return m.OldName(ctx)
	case provide.FieldIPAdres:
		return m.OldIPAdres(ctx)
	case provide.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case provide.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	}
	return nil, fmt.Errorf("unknown Provide field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProvideMutation) SetField(name string, value ent.Value) error {
	switch name {
	case provide.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case provide.FieldIPAdres:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIPAdres(v)
		return nil
	case provide.FieldCreateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case provide.FieldUpdateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	}
	return fmt.Errorf("unknown Provide field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProvideMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProvideMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProvideMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Provide numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProvideMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProvideMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProvideMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Provide nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProvideMutation) ResetField(name string) error {
	switch name {
	case provide.FieldName:
		m.ResetName()
		return nil
	case provide.FieldIPAdres:
		m.ResetIPAdres()
		return nil
	case provide.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case provide.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	}
	return fmt.Errorf("unknown Provide field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProvideMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.provider_id != nil {
		edges = append(edges, provide.EdgeProviderID)
	}
	if m.messages != nil {
		edges = append(edges, provide.EdgeMessages)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProvideMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case provide.EdgeProviderID:
		ids := make([]ent.Value, 0, len(m.provider_id))
		for id := range m.provider_id {
			ids = append(ids, id)
		}
		return ids
	case provide.EdgeMessages:
		ids := make([]ent.Value, 0, len(m.messages))
		for id := range m.messages {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProvideMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedprovider_id != nil {
		edges = append(edges, provide.EdgeProviderID)
	}
	if m.removedmessages != nil {
		edges = append(edges, provide.EdgeMessages)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProvideMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case provide.EdgeProviderID:
		ids := make([]ent.Value, 0, len(m.removedprovider_id))
		for id := range m.removedprovider_id {
			ids = append(ids, id)
		}
		return ids
	case provide.EdgeMessages:
		ids := make([]ent.Value, 0, len(m.removedmessages))
		for id := range m.removedmessages {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProvideMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedprovider_id {
		edges = append(edges, provide.EdgeProviderID)
	}
	if m.clearedmessages {
		edges = append(edges, provide.EdgeMessages)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProvideMutation) EdgeCleared(name string) bool {
	switch name {
	case provide.EdgeProviderID:
		return m.clearedprovider_id
	case provide.EdgeMessages:
		return m.clearedmessages
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProvideMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Provide unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProvideMutation) ResetEdge(name string) error {
	switch name {
	case provide.EdgeProviderID:
		m.ResetProviderID()
		return nil
	case provide.EdgeMessages:
		m.ResetMessages()
		return nil
	}
	return fmt.Errorf("unknown Provide edge %s", name)
}

// RateMutation represents an operation that mutates the Rate nodes in the graph.
type RateMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	name           *string
	create_at      *time.Time
	update_at      *time.Time
	clearedFields  map[string]struct{}
	rate_id        map[uuid.UUID]struct{}
	removedrate_id map[uuid.UUID]struct{}
	clearedrate_id bool
	user           map[uuid.UUID]struct{}
	removeduser    map[uuid.UUID]struct{}
	cleareduser    bool
	done           bool
	oldValue       func(context.Context) (*Rate, error)
	predicates     []predicate.Rate
}

var _ ent.Mutation = (*RateMutation)(nil)

// rateOption allows management of the mutation configuration using functional options.
type rateOption func(*RateMutation)

// newRateMutation creates new mutation for the Rate entity.
func newRateMutation(c config, op Op, opts ...rateOption) *RateMutation {
	m := &RateMutation{
		config:        c,
		op:            op,
		typ:           TypeRate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRateID sets the ID field of the mutation.
func withRateID(id uuid.UUID) rateOption {
	return func(m *RateMutation) {
		var (
			err   error
			once  sync.Once
			value *Rate
		)
		m.oldValue = func(ctx context.Context) (*Rate, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Rate.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRate sets the old Rate of the mutation.
func withRate(node *Rate) rateOption {
	return func(m *RateMutation) {
		m.oldValue = func(context.Context) (*Rate, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Rate entities.
func (m *RateMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *RateMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *RateMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RateMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Rate entity.
// If the Rate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RateMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RateMutation) ResetName() {
	m.name = nil
}

// SetCreateAt sets the "create_at" field.
func (m *RateMutation) SetCreateAt(t time.Time) {
	m.create_at = &t
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *RateMutation) CreateAt() (r time.Time, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the Rate entity.
// If the Rate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RateMutation) OldCreateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *RateMutation) ResetCreateAt() {
	m.create_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *RateMutation) SetUpdateAt(t time.Time) {
	m.update_at = &t
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *RateMutation) UpdateAt() (r time.Time, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the Rate entity.
// If the Rate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RateMutation) OldUpdateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *RateMutation) ResetUpdateAt() {
	m.update_at = nil
}

// AddRateIDIDs adds the "rate_id" edge to the RatePrice entity by ids.
func (m *RateMutation) AddRateIDIDs(ids ...uuid.UUID) {
	if m.rate_id == nil {
		m.rate_id = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.rate_id[ids[i]] = struct{}{}
	}
}

// ClearRateID clears the "rate_id" edge to the RatePrice entity.
func (m *RateMutation) ClearRateID() {
	m.clearedrate_id = true
}

// RateIDCleared returns if the "rate_id" edge to the RatePrice entity was cleared.
func (m *RateMutation) RateIDCleared() bool {
	return m.clearedrate_id
}

// RemoveRateIDIDs removes the "rate_id" edge to the RatePrice entity by IDs.
func (m *RateMutation) RemoveRateIDIDs(ids ...uuid.UUID) {
	if m.removedrate_id == nil {
		m.removedrate_id = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.removedrate_id[ids[i]] = struct{}{}
	}
}

// RemovedRateID returns the removed IDs of the "rate_id" edge to the RatePrice entity.
func (m *RateMutation) RemovedRateIDIDs() (ids []uuid.UUID) {
	for id := range m.removedrate_id {
		ids = append(ids, id)
	}
	return
}

// RateIDIDs returns the "rate_id" edge IDs in the mutation.
func (m *RateMutation) RateIDIDs() (ids []uuid.UUID) {
	for id := range m.rate_id {
		ids = append(ids, id)
	}
	return
}

// ResetRateID resets all changes to the "rate_id" edge.
func (m *RateMutation) ResetRateID() {
	m.rate_id = nil
	m.clearedrate_id = false
	m.removedrate_id = nil
}

// AddUserIDs adds the "user" edge to the User entity by ids.
func (m *RateMutation) AddUserIDs(ids ...uuid.UUID) {
	if m.user == nil {
		m.user = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.user[ids[i]] = struct{}{}
	}
}

// ClearUser clears the "user" edge to the User entity.
func (m *RateMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the "user" edge to the User entity was cleared.
func (m *RateMutation) UserCleared() bool {
	return m.cleareduser
}

// RemoveUserIDs removes the "user" edge to the User entity by IDs.
func (m *RateMutation) RemoveUserIDs(ids ...uuid.UUID) {
	if m.removeduser == nil {
		m.removeduser = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.removeduser[ids[i]] = struct{}{}
	}
}

// RemovedUser returns the removed IDs of the "user" edge to the User entity.
func (m *RateMutation) RemovedUserIDs() (ids []uuid.UUID) {
	for id := range m.removeduser {
		ids = append(ids, id)
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
func (m *RateMutation) UserIDs() (ids []uuid.UUID) {
	for id := range m.user {
		ids = append(ids, id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *RateMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
	m.removeduser = nil
}

// Op returns the operation name.
func (m *RateMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Rate).
func (m *RateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RateMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, rate.FieldName)
	}
	if m.create_at != nil {
		fields = append(fields, rate.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, rate.FieldUpdateAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rate.FieldName:
		return m.Name()
	case rate.FieldCreateAt:
		return m.CreateAt()
	case rate.FieldUpdateAt:
		return m.UpdateAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rate.FieldName:
		return m.OldName(ctx)
	case rate.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case rate.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	}
	return nil, fmt.Errorf("unknown Rate field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rate.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case rate.FieldCreateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case rate.FieldUpdateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	}
	return fmt.Errorf("unknown Rate field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RateMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RateMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RateMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Rate numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RateMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RateMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Rate nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RateMutation) ResetField(name string) error {
	switch name {
	case rate.FieldName:
		m.ResetName()
		return nil
	case rate.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case rate.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	}
	return fmt.Errorf("unknown Rate field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RateMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.rate_id != nil {
		edges = append(edges, rate.EdgeRateID)
	}
	if m.user != nil {
		edges = append(edges, rate.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RateMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case rate.EdgeRateID:
		ids := make([]ent.Value, 0, len(m.rate_id))
		for id := range m.rate_id {
			ids = append(ids, id)
		}
		return ids
	case rate.EdgeUser:
		ids := make([]ent.Value, 0, len(m.user))
		for id := range m.user {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedrate_id != nil {
		edges = append(edges, rate.EdgeRateID)
	}
	if m.removeduser != nil {
		edges = append(edges, rate.EdgeUser)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RateMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case rate.EdgeRateID:
		ids := make([]ent.Value, 0, len(m.removedrate_id))
		for id := range m.removedrate_id {
			ids = append(ids, id)
		}
		return ids
	case rate.EdgeUser:
		ids := make([]ent.Value, 0, len(m.removeduser))
		for id := range m.removeduser {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedrate_id {
		edges = append(edges, rate.EdgeRateID)
	}
	if m.cleareduser {
		edges = append(edges, rate.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RateMutation) EdgeCleared(name string) bool {
	switch name {
	case rate.EdgeRateID:
		return m.clearedrate_id
	case rate.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RateMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Rate unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RateMutation) ResetEdge(name string) error {
	switch name {
	case rate.EdgeRateID:
		m.ResetRateID()
		return nil
	case rate.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Rate edge %s", name)
}

// RatePriceMutation represents an operation that mutates the RatePrice nodes in the graph.
type RatePriceMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	create_at       *time.Time
	update_at       *time.Time
	clearedFields   map[string]struct{}
	id_rate         *uuid.UUID
	clearedid_rate  bool
	id_price        *uuid.UUID
	clearedid_price bool
	done            bool
	oldValue        func(context.Context) (*RatePrice, error)
	predicates      []predicate.RatePrice
}

var _ ent.Mutation = (*RatePriceMutation)(nil)

// ratepriceOption allows management of the mutation configuration using functional options.
type ratepriceOption func(*RatePriceMutation)

// newRatePriceMutation creates new mutation for the RatePrice entity.
func newRatePriceMutation(c config, op Op, opts ...ratepriceOption) *RatePriceMutation {
	m := &RatePriceMutation{
		config:        c,
		op:            op,
		typ:           TypeRatePrice,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRatePriceID sets the ID field of the mutation.
func withRatePriceID(id uuid.UUID) ratepriceOption {
	return func(m *RatePriceMutation) {
		var (
			err   error
			once  sync.Once
			value *RatePrice
		)
		m.oldValue = func(ctx context.Context) (*RatePrice, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RatePrice.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRatePrice sets the old RatePrice of the mutation.
func withRatePrice(node *RatePrice) ratepriceOption {
	return func(m *RatePriceMutation) {
		m.oldValue = func(context.Context) (*RatePrice, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RatePriceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RatePriceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of RatePrice entities.
func (m *RatePriceMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *RatePriceMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateAt sets the "create_at" field.
func (m *RatePriceMutation) SetCreateAt(t time.Time) {
	m.create_at = &t
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *RatePriceMutation) CreateAt() (r time.Time, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the RatePrice entity.
// If the RatePrice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RatePriceMutation) OldCreateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *RatePriceMutation) ResetCreateAt() {
	m.create_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *RatePriceMutation) SetUpdateAt(t time.Time) {
	m.update_at = &t
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *RatePriceMutation) UpdateAt() (r time.Time, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the RatePrice entity.
// If the RatePrice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RatePriceMutation) OldUpdateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *RatePriceMutation) ResetUpdateAt() {
	m.update_at = nil
}

// SetIDRateID sets the "id_rate" edge to the Rate entity by id.
func (m *RatePriceMutation) SetIDRateID(id uuid.UUID) {
	m.id_rate = &id
}

// ClearIDRate clears the "id_rate" edge to the Rate entity.
func (m *RatePriceMutation) ClearIDRate() {
	m.clearedid_rate = true
}

// IDRateCleared returns if the "id_rate" edge to the Rate entity was cleared.
func (m *RatePriceMutation) IDRateCleared() bool {
	return m.clearedid_rate
}

// IDRateID returns the "id_rate" edge ID in the mutation.
func (m *RatePriceMutation) IDRateID() (id uuid.UUID, exists bool) {
	if m.id_rate != nil {
		return *m.id_rate, true
	}
	return
}

// IDRateIDs returns the "id_rate" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// IDRateID instead. It exists only for internal usage by the builders.
func (m *RatePriceMutation) IDRateIDs() (ids []uuid.UUID) {
	if id := m.id_rate; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetIDRate resets all changes to the "id_rate" edge.
func (m *RatePriceMutation) ResetIDRate() {
	m.id_rate = nil
	m.clearedid_rate = false
}

// SetIDPriceID sets the "id_price" edge to the Price entity by id.
func (m *RatePriceMutation) SetIDPriceID(id uuid.UUID) {
	m.id_price = &id
}

// ClearIDPrice clears the "id_price" edge to the Price entity.
func (m *RatePriceMutation) ClearIDPrice() {
	m.clearedid_price = true
}

// IDPriceCleared returns if the "id_price" edge to the Price entity was cleared.
func (m *RatePriceMutation) IDPriceCleared() bool {
	return m.clearedid_price
}

// IDPriceID returns the "id_price" edge ID in the mutation.
func (m *RatePriceMutation) IDPriceID() (id uuid.UUID, exists bool) {
	if m.id_price != nil {
		return *m.id_price, true
	}
	return
}

// IDPriceIDs returns the "id_price" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// IDPriceID instead. It exists only for internal usage by the builders.
func (m *RatePriceMutation) IDPriceIDs() (ids []uuid.UUID) {
	if id := m.id_price; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetIDPrice resets all changes to the "id_price" edge.
func (m *RatePriceMutation) ResetIDPrice() {
	m.id_price = nil
	m.clearedid_price = false
}

// Op returns the operation name.
func (m *RatePriceMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (RatePrice).
func (m *RatePriceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RatePriceMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.create_at != nil {
		fields = append(fields, rateprice.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, rateprice.FieldUpdateAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RatePriceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rateprice.FieldCreateAt:
		return m.CreateAt()
	case rateprice.FieldUpdateAt:
		return m.UpdateAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RatePriceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rateprice.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case rateprice.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	}
	return nil, fmt.Errorf("unknown RatePrice field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RatePriceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rateprice.FieldCreateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case rateprice.FieldUpdateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	}
	return fmt.Errorf("unknown RatePrice field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RatePriceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RatePriceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RatePriceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown RatePrice numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RatePriceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RatePriceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RatePriceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RatePrice nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RatePriceMutation) ResetField(name string) error {
	switch name {
	case rateprice.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case rateprice.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	}
	return fmt.Errorf("unknown RatePrice field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RatePriceMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.id_rate != nil {
		edges = append(edges, rateprice.EdgeIDRate)
	}
	if m.id_price != nil {
		edges = append(edges, rateprice.EdgeIDPrice)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RatePriceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case rateprice.EdgeIDRate:
		if id := m.id_rate; id != nil {
			return []ent.Value{*id}
		}
	case rateprice.EdgeIDPrice:
		if id := m.id_price; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RatePriceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RatePriceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RatePriceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedid_rate {
		edges = append(edges, rateprice.EdgeIDRate)
	}
	if m.clearedid_price {
		edges = append(edges, rateprice.EdgeIDPrice)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RatePriceMutation) EdgeCleared(name string) bool {
	switch name {
	case rateprice.EdgeIDRate:
		return m.clearedid_rate
	case rateprice.EdgeIDPrice:
		return m.clearedid_price
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RatePriceMutation) ClearEdge(name string) error {
	switch name {
	case rateprice.EdgeIDRate:
		m.ClearIDRate()
		return nil
	case rateprice.EdgeIDPrice:
		m.ClearIDPrice()
		return nil
	}
	return fmt.Errorf("unknown RatePrice unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RatePriceMutation) ResetEdge(name string) error {
	switch name {
	case rateprice.EdgeIDRate:
		m.ResetIDRate()
		return nil
	case rateprice.EdgeIDPrice:
		m.ResetIDPrice()
		return nil
	}
	return fmt.Errorf("unknown RatePrice edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uuid.UUID
	balance              *int16
	addbalance           *int16
	create_at            *time.Time
	update_at            *time.Time
	clearedFields        map[string]struct{}
	user_messages        map[uuid.UUID]struct{}
	removeduser_messages map[uuid.UUID]struct{}
	cleareduser_messages bool
	messages             map[uuid.UUID]struct{}
	removedmessages      map[uuid.UUID]struct{}
	clearedmessages      bool
	rate_id              *uuid.UUID
	clearedrate_id       bool
	done                 bool
	oldValue             func(context.Context) (*User, error)
	predicates           []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetBalance sets the "balance" field.
func (m *UserMutation) SetBalance(i int16) {
	m.balance = &i
	m.addbalance = nil
}

// Balance returns the value of the "balance" field in the mutation.
func (m *UserMutation) Balance() (r int16, exists bool) {
	v := m.balance
	if v == nil {
		return
	}
	return *v, true
}

// OldBalance returns the old "balance" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldBalance(ctx context.Context) (v int16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBalance is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBalance requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBalance: %w", err)
	}
	return oldValue.Balance, nil
}

// AddBalance adds i to the "balance" field.
func (m *UserMutation) AddBalance(i int16) {
	if m.addbalance != nil {
		*m.addbalance += i
	} else {
		m.addbalance = &i
	}
}

// AddedBalance returns the value that was added to the "balance" field in this mutation.
func (m *UserMutation) AddedBalance() (r int16, exists bool) {
	v := m.addbalance
	if v == nil {
		return
	}
	return *v, true
}

// ResetBalance resets all changes to the "balance" field.
func (m *UserMutation) ResetBalance() {
	m.balance = nil
	m.addbalance = nil
}

// SetCreateAt sets the "create_at" field.
func (m *UserMutation) SetCreateAt(t time.Time) {
	m.create_at = &t
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *UserMutation) CreateAt() (r time.Time, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *UserMutation) ResetCreateAt() {
	m.create_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *UserMutation) SetUpdateAt(t time.Time) {
	m.update_at = &t
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *UserMutation) UpdateAt() (r time.Time, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *UserMutation) ResetUpdateAt() {
	m.update_at = nil
}

// AddUserMessageIDs adds the "user_messages" edge to the UserMonthMessage entity by ids.
func (m *UserMutation) AddUserMessageIDs(ids ...uuid.UUID) {
	if m.user_messages == nil {
		m.user_messages = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.user_messages[ids[i]] = struct{}{}
	}
}

// ClearUserMessages clears the "user_messages" edge to the UserMonthMessage entity.
func (m *UserMutation) ClearUserMessages() {
	m.cleareduser_messages = true
}

// UserMessagesCleared returns if the "user_messages" edge to the UserMonthMessage entity was cleared.
func (m *UserMutation) UserMessagesCleared() bool {
	return m.cleareduser_messages
}

// RemoveUserMessageIDs removes the "user_messages" edge to the UserMonthMessage entity by IDs.
func (m *UserMutation) RemoveUserMessageIDs(ids ...uuid.UUID) {
	if m.removeduser_messages == nil {
		m.removeduser_messages = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.removeduser_messages[ids[i]] = struct{}{}
	}
}

// RemovedUserMessages returns the removed IDs of the "user_messages" edge to the UserMonthMessage entity.
func (m *UserMutation) RemovedUserMessagesIDs() (ids []uuid.UUID) {
	for id := range m.removeduser_messages {
		ids = append(ids, id)
	}
	return
}

// UserMessagesIDs returns the "user_messages" edge IDs in the mutation.
func (m *UserMutation) UserMessagesIDs() (ids []uuid.UUID) {
	for id := range m.user_messages {
		ids = append(ids, id)
	}
	return
}

// ResetUserMessages resets all changes to the "user_messages" edge.
func (m *UserMutation) ResetUserMessages() {
	m.user_messages = nil
	m.cleareduser_messages = false
	m.removeduser_messages = nil
}

// AddMessageIDs adds the "messages" edge to the Messages entity by ids.
func (m *UserMutation) AddMessageIDs(ids ...uuid.UUID) {
	if m.messages == nil {
		m.messages = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.messages[ids[i]] = struct{}{}
	}
}

// ClearMessages clears the "messages" edge to the Messages entity.
func (m *UserMutation) ClearMessages() {
	m.clearedmessages = true
}

// MessagesCleared returns if the "messages" edge to the Messages entity was cleared.
func (m *UserMutation) MessagesCleared() bool {
	return m.clearedmessages
}

// RemoveMessageIDs removes the "messages" edge to the Messages entity by IDs.
func (m *UserMutation) RemoveMessageIDs(ids ...uuid.UUID) {
	if m.removedmessages == nil {
		m.removedmessages = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.removedmessages[ids[i]] = struct{}{}
	}
}

// RemovedMessages returns the removed IDs of the "messages" edge to the Messages entity.
func (m *UserMutation) RemovedMessagesIDs() (ids []uuid.UUID) {
	for id := range m.removedmessages {
		ids = append(ids, id)
	}
	return
}

// MessagesIDs returns the "messages" edge IDs in the mutation.
func (m *UserMutation) MessagesIDs() (ids []uuid.UUID) {
	for id := range m.messages {
		ids = append(ids, id)
	}
	return
}

// ResetMessages resets all changes to the "messages" edge.
func (m *UserMutation) ResetMessages() {
	m.messages = nil
	m.clearedmessages = false
	m.removedmessages = nil
}

// SetRateIDID sets the "rate_id" edge to the Rate entity by id.
func (m *UserMutation) SetRateIDID(id uuid.UUID) {
	m.rate_id = &id
}

// ClearRateID clears the "rate_id" edge to the Rate entity.
func (m *UserMutation) ClearRateID() {
	m.clearedrate_id = true
}

// RateIDCleared returns if the "rate_id" edge to the Rate entity was cleared.
func (m *UserMutation) RateIDCleared() bool {
	return m.clearedrate_id
}

// RateIDID returns the "rate_id" edge ID in the mutation.
func (m *UserMutation) RateIDID() (id uuid.UUID, exists bool) {
	if m.rate_id != nil {
		return *m.rate_id, true
	}
	return
}

// RateIDIDs returns the "rate_id" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RateIDID instead. It exists only for internal usage by the builders.
func (m *UserMutation) RateIDIDs() (ids []uuid.UUID) {
	if id := m.rate_id; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRateID resets all changes to the "rate_id" edge.
func (m *UserMutation) ResetRateID() {
	m.rate_id = nil
	m.clearedrate_id = false
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.balance != nil {
		fields = append(fields, user.FieldBalance)
	}
	if m.create_at != nil {
		fields = append(fields, user.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, user.FieldUpdateAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldBalance:
		return m.Balance()
	case user.FieldCreateAt:
		return m.CreateAt()
	case user.FieldUpdateAt:
		return m.UpdateAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldBalance:
		return m.OldBalance(ctx)
	case user.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case user.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldBalance:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBalance(v)
		return nil
	case user.FieldCreateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case user.FieldUpdateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addbalance != nil {
		fields = append(fields, user.FieldBalance)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldBalance:
		return m.AddedBalance()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldBalance:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBalance(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldBalance:
		m.ResetBalance()
		return nil
	case user.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case user.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.user_messages != nil {
		edges = append(edges, user.EdgeUserMessages)
	}
	if m.messages != nil {
		edges = append(edges, user.EdgeMessages)
	}
	if m.rate_id != nil {
		edges = append(edges, user.EdgeRateID)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUserMessages:
		ids := make([]ent.Value, 0, len(m.user_messages))
		for id := range m.user_messages {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeMessages:
		ids := make([]ent.Value, 0, len(m.messages))
		for id := range m.messages {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeRateID:
		if id := m.rate_id; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removeduser_messages != nil {
		edges = append(edges, user.EdgeUserMessages)
	}
	if m.removedmessages != nil {
		edges = append(edges, user.EdgeMessages)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUserMessages:
		ids := make([]ent.Value, 0, len(m.removeduser_messages))
		for id := range m.removeduser_messages {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeMessages:
		ids := make([]ent.Value, 0, len(m.removedmessages))
		for id := range m.removedmessages {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareduser_messages {
		edges = append(edges, user.EdgeUserMessages)
	}
	if m.clearedmessages {
		edges = append(edges, user.EdgeMessages)
	}
	if m.clearedrate_id {
		edges = append(edges, user.EdgeRateID)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeUserMessages:
		return m.cleareduser_messages
	case user.EdgeMessages:
		return m.clearedmessages
	case user.EdgeRateID:
		return m.clearedrate_id
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeRateID:
		m.ClearRateID()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeUserMessages:
		m.ResetUserMessages()
		return nil
	case user.EdgeMessages:
		m.ResetMessages()
		return nil
	case user.EdgeRateID:
		m.ResetRateID()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// UserMonthMessageMutation represents an operation that mutates the UserMonthMessage nodes in the graph.
type UserMonthMessageMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	month              *time.Time
	create_at          *time.Time
	update_at          *time.Time
	clearedFields      map[string]struct{}
	provider_id        *uuid.UUID
	clearedprovider_id bool
	user_id            *uuid.UUID
	cleareduser_id     bool
	done               bool
	oldValue           func(context.Context) (*UserMonthMessage, error)
	predicates         []predicate.UserMonthMessage
}

var _ ent.Mutation = (*UserMonthMessageMutation)(nil)

// usermonthmessageOption allows management of the mutation configuration using functional options.
type usermonthmessageOption func(*UserMonthMessageMutation)

// newUserMonthMessageMutation creates new mutation for the UserMonthMessage entity.
func newUserMonthMessageMutation(c config, op Op, opts ...usermonthmessageOption) *UserMonthMessageMutation {
	m := &UserMonthMessageMutation{
		config:        c,
		op:            op,
		typ:           TypeUserMonthMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserMonthMessageID sets the ID field of the mutation.
func withUserMonthMessageID(id uuid.UUID) usermonthmessageOption {
	return func(m *UserMonthMessageMutation) {
		var (
			err   error
			once  sync.Once
			value *UserMonthMessage
		)
		m.oldValue = func(ctx context.Context) (*UserMonthMessage, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserMonthMessage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserMonthMessage sets the old UserMonthMessage of the mutation.
func withUserMonthMessage(node *UserMonthMessage) usermonthmessageOption {
	return func(m *UserMonthMessageMutation) {
		m.oldValue = func(context.Context) (*UserMonthMessage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMonthMessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMonthMessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserMonthMessage entities.
func (m *UserMonthMessageMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *UserMonthMessageMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetMonth sets the "month" field.
func (m *UserMonthMessageMutation) SetMonth(t time.Time) {
	m.month = &t
}

// Month returns the value of the "month" field in the mutation.
func (m *UserMonthMessageMutation) Month() (r time.Time, exists bool) {
	v := m.month
	if v == nil {
		return
	}
	return *v, true
}

// OldMonth returns the old "month" field's value of the UserMonthMessage entity.
// If the UserMonthMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMonthMessageMutation) OldMonth(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMonth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMonth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMonth: %w", err)
	}
	return oldValue.Month, nil
}

// ResetMonth resets all changes to the "month" field.
func (m *UserMonthMessageMutation) ResetMonth() {
	m.month = nil
}

// SetCreateAt sets the "create_at" field.
func (m *UserMonthMessageMutation) SetCreateAt(t time.Time) {
	m.create_at = &t
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *UserMonthMessageMutation) CreateAt() (r time.Time, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the UserMonthMessage entity.
// If the UserMonthMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMonthMessageMutation) OldCreateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *UserMonthMessageMutation) ResetCreateAt() {
	m.create_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *UserMonthMessageMutation) SetUpdateAt(t time.Time) {
	m.update_at = &t
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *UserMonthMessageMutation) UpdateAt() (r time.Time, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the UserMonthMessage entity.
// If the UserMonthMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMonthMessageMutation) OldUpdateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *UserMonthMessageMutation) ResetUpdateAt() {
	m.update_at = nil
}

// SetProviderIDID sets the "provider_id" edge to the Provide entity by id.
func (m *UserMonthMessageMutation) SetProviderIDID(id uuid.UUID) {
	m.provider_id = &id
}

// ClearProviderID clears the "provider_id" edge to the Provide entity.
func (m *UserMonthMessageMutation) ClearProviderID() {
	m.clearedprovider_id = true
}

// ProviderIDCleared returns if the "provider_id" edge to the Provide entity was cleared.
func (m *UserMonthMessageMutation) ProviderIDCleared() bool {
	return m.clearedprovider_id
}

// ProviderIDID returns the "provider_id" edge ID in the mutation.
func (m *UserMonthMessageMutation) ProviderIDID() (id uuid.UUID, exists bool) {
	if m.provider_id != nil {
		return *m.provider_id, true
	}
	return
}

// ProviderIDIDs returns the "provider_id" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProviderIDID instead. It exists only for internal usage by the builders.
func (m *UserMonthMessageMutation) ProviderIDIDs() (ids []uuid.UUID) {
	if id := m.provider_id; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProviderID resets all changes to the "provider_id" edge.
func (m *UserMonthMessageMutation) ResetProviderID() {
	m.provider_id = nil
	m.clearedprovider_id = false
}

// SetUserIDID sets the "user_id" edge to the User entity by id.
func (m *UserMonthMessageMutation) SetUserIDID(id uuid.UUID) {
	m.user_id = &id
}

// ClearUserID clears the "user_id" edge to the User entity.
func (m *UserMonthMessageMutation) ClearUserID() {
	m.cleareduser_id = true
}

// UserIDCleared returns if the "user_id" edge to the User entity was cleared.
func (m *UserMonthMessageMutation) UserIDCleared() bool {
	return m.cleareduser_id
}

// UserIDID returns the "user_id" edge ID in the mutation.
func (m *UserMonthMessageMutation) UserIDID() (id uuid.UUID, exists bool) {
	if m.user_id != nil {
		return *m.user_id, true
	}
	return
}

// UserIDIDs returns the "user_id" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserIDID instead. It exists only for internal usage by the builders.
func (m *UserMonthMessageMutation) UserIDIDs() (ids []uuid.UUID) {
	if id := m.user_id; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUserID resets all changes to the "user_id" edge.
func (m *UserMonthMessageMutation) ResetUserID() {
	m.user_id = nil
	m.cleareduser_id = false
}

// Op returns the operation name.
func (m *UserMonthMessageMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserMonthMessage).
func (m *UserMonthMessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMonthMessageMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.month != nil {
		fields = append(fields, usermonthmessage.FieldMonth)
	}
	if m.create_at != nil {
		fields = append(fields, usermonthmessage.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, usermonthmessage.FieldUpdateAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMonthMessageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case usermonthmessage.FieldMonth:
		return m.Month()
	case usermonthmessage.FieldCreateAt:
		return m.CreateAt()
	case usermonthmessage.FieldUpdateAt:
		return m.UpdateAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMonthMessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case usermonthmessage.FieldMonth:
		return m.OldMonth(ctx)
	case usermonthmessage.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case usermonthmessage.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	}
	return nil, fmt.Errorf("unknown UserMonthMessage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMonthMessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case usermonthmessage.FieldMonth:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMonth(v)
		return nil
	case usermonthmessage.FieldCreateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case usermonthmessage.FieldUpdateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserMonthMessage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMonthMessageMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMonthMessageMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMonthMessageMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserMonthMessage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMonthMessageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMonthMessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMonthMessageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserMonthMessage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMonthMessageMutation) ResetField(name string) error {
	switch name {
	case usermonthmessage.FieldMonth:
		m.ResetMonth()
		return nil
	case usermonthmessage.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case usermonthmessage.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	}
	return fmt.Errorf("unknown UserMonthMessage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMonthMessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.provider_id != nil {
		edges = append(edges, usermonthmessage.EdgeProviderID)
	}
	if m.user_id != nil {
		edges = append(edges, usermonthmessage.EdgeUserID)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMonthMessageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case usermonthmessage.EdgeProviderID:
		if id := m.provider_id; id != nil {
			return []ent.Value{*id}
		}
	case usermonthmessage.EdgeUserID:
		if id := m.user_id; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMonthMessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMonthMessageMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMonthMessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedprovider_id {
		edges = append(edges, usermonthmessage.EdgeProviderID)
	}
	if m.cleareduser_id {
		edges = append(edges, usermonthmessage.EdgeUserID)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMonthMessageMutation) EdgeCleared(name string) bool {
	switch name {
	case usermonthmessage.EdgeProviderID:
		return m.clearedprovider_id
	case usermonthmessage.EdgeUserID:
		return m.cleareduser_id
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMonthMessageMutation) ClearEdge(name string) error {
	switch name {
	case usermonthmessage.EdgeProviderID:
		m.ClearProviderID()
		return nil
	case usermonthmessage.EdgeUserID:
		m.ClearUserID()
		return nil
	}
	return fmt.Errorf("unknown UserMonthMessage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMonthMessageMutation) ResetEdge(name string) error {
	switch name {
	case usermonthmessage.EdgeProviderID:
		m.ResetProviderID()
		return nil
	case usermonthmessage.EdgeUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown UserMonthMessage edge %s", name)
}
