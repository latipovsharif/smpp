// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"smpp/ent/price"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/google/uuid"
)

// Price is the model entity for the Price schema.
type Price struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Min holds the value of the "min" field.
	Min int32 `json:"min,omitempty"`
	// Max holds the value of the "max" field.
	Max int32 `json:"max,omitempty"`
	// Price holds the value of the "price" field.
	Price int16 `json:"price,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt time.Time `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt time.Time `json:"update_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PriceQuery when eager-loading is set.
	Edges PriceEdges `json:"edges"`
}

// PriceEdges holds the relations/edges for other nodes in the graph.
type PriceEdges struct {
	// PriceID holds the value of the price_id edge.
	PriceID []*RatePrice
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PriceIDOrErr returns the PriceID value or an error if the edge
// was not loaded in eager-loading.
func (e PriceEdges) PriceIDOrErr() ([]*RatePrice, error) {
	if e.loadedTypes[0] {
		return e.PriceID, nil
	}
	return nil, &NotLoadedError{edge: "price_id"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Price) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case price.FieldMin, price.FieldMax, price.FieldPrice:
			values[i] = &sql.NullInt64{}
		case price.FieldCreateAt, price.FieldUpdateAt:
			values[i] = &sql.NullTime{}
		case price.FieldID:
			values[i] = &uuid.UUID{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Price", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Price fields.
func (pr *Price) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case price.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pr.ID = *value
			}
		case price.FieldMin:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field min", values[i])
			} else if value.Valid {
				pr.Min = int32(value.Int64)
			}
		case price.FieldMax:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max", values[i])
			} else if value.Valid {
				pr.Max = int32(value.Int64)
			}
		case price.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				pr.Price = int16(value.Int64)
			}
		case price.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				pr.CreateAt = value.Time
			}
		case price.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				pr.UpdateAt = value.Time
			}
		}
	}
	return nil
}

// QueryPriceID queries the "price_id" edge of the Price entity.
func (pr *Price) QueryPriceID() *RatePriceQuery {
	return (&PriceClient{config: pr.config}).QueryPriceID(pr)
}

// Update returns a builder for updating this Price.
// Note that you need to call Price.Unwrap() before calling this method if this Price
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Price) Update() *PriceUpdateOne {
	return (&PriceClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the Price entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Price) Unwrap() *Price {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Price is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Price) String() string {
	var builder strings.Builder
	builder.WriteString("Price(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", min=")
	builder.WriteString(fmt.Sprintf("%v", pr.Min))
	builder.WriteString(", max=")
	builder.WriteString(fmt.Sprintf("%v", pr.Max))
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", pr.Price))
	builder.WriteString(", create_at=")
	builder.WriteString(pr.CreateAt.Format(time.ANSIC))
	builder.WriteString(", update_at=")
	builder.WriteString(pr.UpdateAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Prices is a parsable slice of Price.
type Prices []*Price

func (pr Prices) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
