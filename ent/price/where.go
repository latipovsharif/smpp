// Code generated by entc, DO NOT EDIT.

package price

import (
	"smpp/ent/predicate"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Min applies equality check predicate on the "min" field. It's identical to MinEQ.
func Min(v int32) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMin), v))
	})
}

// Max applies equality check predicate on the "max" field. It's identical to MaxEQ.
func Max(v int32) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMax), v))
	})
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v int16) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v time.Time) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v time.Time) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// MinEQ applies the EQ predicate on the "min" field.
func MinEQ(v int32) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMin), v))
	})
}

// MinNEQ applies the NEQ predicate on the "min" field.
func MinNEQ(v int32) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMin), v))
	})
}

// MinIn applies the In predicate on the "min" field.
func MinIn(vs ...int32) predicate.Price {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Price(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMin), v...))
	})
}

// MinNotIn applies the NotIn predicate on the "min" field.
func MinNotIn(vs ...int32) predicate.Price {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Price(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMin), v...))
	})
}

// MinGT applies the GT predicate on the "min" field.
func MinGT(v int32) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMin), v))
	})
}

// MinGTE applies the GTE predicate on the "min" field.
func MinGTE(v int32) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMin), v))
	})
}

// MinLT applies the LT predicate on the "min" field.
func MinLT(v int32) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMin), v))
	})
}

// MinLTE applies the LTE predicate on the "min" field.
func MinLTE(v int32) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMin), v))
	})
}

// MaxEQ applies the EQ predicate on the "max" field.
func MaxEQ(v int32) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMax), v))
	})
}

// MaxNEQ applies the NEQ predicate on the "max" field.
func MaxNEQ(v int32) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMax), v))
	})
}

// MaxIn applies the In predicate on the "max" field.
func MaxIn(vs ...int32) predicate.Price {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Price(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMax), v...))
	})
}

// MaxNotIn applies the NotIn predicate on the "max" field.
func MaxNotIn(vs ...int32) predicate.Price {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Price(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMax), v...))
	})
}

// MaxGT applies the GT predicate on the "max" field.
func MaxGT(v int32) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMax), v))
	})
}

// MaxGTE applies the GTE predicate on the "max" field.
func MaxGTE(v int32) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMax), v))
	})
}

// MaxLT applies the LT predicate on the "max" field.
func MaxLT(v int32) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMax), v))
	})
}

// MaxLTE applies the LTE predicate on the "max" field.
func MaxLTE(v int32) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMax), v))
	})
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v int16) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v int16) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrice), v))
	})
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...int16) predicate.Price {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Price(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrice), v...))
	})
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...int16) predicate.Price {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Price(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrice), v...))
	})
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v int16) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrice), v))
	})
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v int16) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrice), v))
	})
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v int16) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrice), v))
	})
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v int16) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrice), v))
	})
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v time.Time) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v time.Time) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...time.Time) predicate.Price {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Price(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateAt), v...))
	})
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...time.Time) predicate.Price {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Price(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateAt), v...))
	})
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v time.Time) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateAt), v))
	})
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v time.Time) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateAt), v))
	})
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v time.Time) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateAt), v))
	})
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v time.Time) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateAt), v))
	})
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v time.Time) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v time.Time) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...time.Time) predicate.Price {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Price(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...time.Time) predicate.Price {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Price(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v time.Time) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v time.Time) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v time.Time) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v time.Time) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateAt), v))
	})
}

// HasPriceID applies the HasEdge predicate on the "price_id" edge.
func HasPriceID() predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PriceIDTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PriceIDTable, PriceIDColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPriceIDWith applies the HasEdge predicate on the "price_id" edge with a given conditions (other predicates).
func HasPriceIDWith(preds ...predicate.RatePrice) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PriceIDInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PriceIDTable, PriceIDColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Price) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Price) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Price) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		p(s.Not())
	})
}
