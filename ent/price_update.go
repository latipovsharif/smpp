// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"smpp/ent/predicate"
	"smpp/ent/price"
	"smpp/ent/rateprice"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// PriceUpdate is the builder for updating Price entities.
type PriceUpdate struct {
	config
	hooks    []Hook
	mutation *PriceMutation
}

// Where adds a new predicate for the PriceUpdate builder.
func (pu *PriceUpdate) Where(ps ...predicate.Price) *PriceUpdate {
	pu.mutation.predicates = append(pu.mutation.predicates, ps...)
	return pu
}

// SetMin sets the "min" field.
func (pu *PriceUpdate) SetMin(i int32) *PriceUpdate {
	pu.mutation.ResetMin()
	pu.mutation.SetMin(i)
	return pu
}

// AddMin adds i to the "min" field.
func (pu *PriceUpdate) AddMin(i int32) *PriceUpdate {
	pu.mutation.AddMin(i)
	return pu
}

// SetMax sets the "max" field.
func (pu *PriceUpdate) SetMax(i int32) *PriceUpdate {
	pu.mutation.ResetMax()
	pu.mutation.SetMax(i)
	return pu
}

// AddMax adds i to the "max" field.
func (pu *PriceUpdate) AddMax(i int32) *PriceUpdate {
	pu.mutation.AddMax(i)
	return pu
}

// SetPrice sets the "price" field.
func (pu *PriceUpdate) SetPrice(s string) *PriceUpdate {
	pu.mutation.SetPrice(s)
	return pu
}

// SetCreateAt sets the "create_at" field.
func (pu *PriceUpdate) SetCreateAt(t time.Time) *PriceUpdate {
	pu.mutation.SetCreateAt(t)
	return pu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (pu *PriceUpdate) SetNillableCreateAt(t *time.Time) *PriceUpdate {
	if t != nil {
		pu.SetCreateAt(*t)
	}
	return pu
}

// SetUpdateAt sets the "update_at" field.
func (pu *PriceUpdate) SetUpdateAt(t time.Time) *PriceUpdate {
	pu.mutation.SetUpdateAt(t)
	return pu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (pu *PriceUpdate) SetNillableUpdateAt(t *time.Time) *PriceUpdate {
	if t != nil {
		pu.SetUpdateAt(*t)
	}
	return pu
}

// AddPriceIDIDs adds the "price_id" edge to the RatePrice entity by IDs.
func (pu *PriceUpdate) AddPriceIDIDs(ids ...uuid.UUID) *PriceUpdate {
	pu.mutation.AddPriceIDIDs(ids...)
	return pu
}

// AddPriceID adds the "price_id" edges to the RatePrice entity.
func (pu *PriceUpdate) AddPriceID(r ...*RatePrice) *PriceUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.AddPriceIDIDs(ids...)
}

// Mutation returns the PriceMutation object of the builder.
func (pu *PriceUpdate) Mutation() *PriceMutation {
	return pu.mutation
}

// ClearPriceID clears all "price_id" edges to the RatePrice entity.
func (pu *PriceUpdate) ClearPriceID() *PriceUpdate {
	pu.mutation.ClearPriceID()
	return pu
}

// RemovePriceIDIDs removes the "price_id" edge to RatePrice entities by IDs.
func (pu *PriceUpdate) RemovePriceIDIDs(ids ...uuid.UUID) *PriceUpdate {
	pu.mutation.RemovePriceIDIDs(ids...)
	return pu
}

// RemovePriceID removes "price_id" edges to RatePrice entities.
func (pu *PriceUpdate) RemovePriceID(r ...*RatePrice) *PriceUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.RemovePriceIDIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PriceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PriceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PriceUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PriceUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PriceUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PriceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   price.Table,
			Columns: price.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: price.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Min(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: price.FieldMin,
		})
	}
	if value, ok := pu.mutation.AddedMin(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: price.FieldMin,
		})
	}
	if value, ok := pu.mutation.Max(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: price.FieldMax,
		})
	}
	if value, ok := pu.mutation.AddedMax(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: price.FieldMax,
		})
	}
	if value, ok := pu.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: price.FieldPrice,
		})
	}
	if value, ok := pu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: price.FieldCreateAt,
		})
	}
	if value, ok := pu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: price.FieldUpdateAt,
		})
	}
	if pu.mutation.PriceIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   price.PriceIDTable,
			Columns: []string{price.PriceIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: rateprice.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPriceIDIDs(); len(nodes) > 0 && !pu.mutation.PriceIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   price.PriceIDTable,
			Columns: []string{price.PriceIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: rateprice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PriceIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   price.PriceIDTable,
			Columns: []string{price.PriceIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: rateprice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{price.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PriceUpdateOne is the builder for updating a single Price entity.
type PriceUpdateOne struct {
	config
	hooks    []Hook
	mutation *PriceMutation
}

// SetMin sets the "min" field.
func (puo *PriceUpdateOne) SetMin(i int32) *PriceUpdateOne {
	puo.mutation.ResetMin()
	puo.mutation.SetMin(i)
	return puo
}

// AddMin adds i to the "min" field.
func (puo *PriceUpdateOne) AddMin(i int32) *PriceUpdateOne {
	puo.mutation.AddMin(i)
	return puo
}

// SetMax sets the "max" field.
func (puo *PriceUpdateOne) SetMax(i int32) *PriceUpdateOne {
	puo.mutation.ResetMax()
	puo.mutation.SetMax(i)
	return puo
}

// AddMax adds i to the "max" field.
func (puo *PriceUpdateOne) AddMax(i int32) *PriceUpdateOne {
	puo.mutation.AddMax(i)
	return puo
}

// SetPrice sets the "price" field.
func (puo *PriceUpdateOne) SetPrice(s string) *PriceUpdateOne {
	puo.mutation.SetPrice(s)
	return puo
}

// SetCreateAt sets the "create_at" field.
func (puo *PriceUpdateOne) SetCreateAt(t time.Time) *PriceUpdateOne {
	puo.mutation.SetCreateAt(t)
	return puo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (puo *PriceUpdateOne) SetNillableCreateAt(t *time.Time) *PriceUpdateOne {
	if t != nil {
		puo.SetCreateAt(*t)
	}
	return puo
}

// SetUpdateAt sets the "update_at" field.
func (puo *PriceUpdateOne) SetUpdateAt(t time.Time) *PriceUpdateOne {
	puo.mutation.SetUpdateAt(t)
	return puo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (puo *PriceUpdateOne) SetNillableUpdateAt(t *time.Time) *PriceUpdateOne {
	if t != nil {
		puo.SetUpdateAt(*t)
	}
	return puo
}

// AddPriceIDIDs adds the "price_id" edge to the RatePrice entity by IDs.
func (puo *PriceUpdateOne) AddPriceIDIDs(ids ...uuid.UUID) *PriceUpdateOne {
	puo.mutation.AddPriceIDIDs(ids...)
	return puo
}

// AddPriceID adds the "price_id" edges to the RatePrice entity.
func (puo *PriceUpdateOne) AddPriceID(r ...*RatePrice) *PriceUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.AddPriceIDIDs(ids...)
}

// Mutation returns the PriceMutation object of the builder.
func (puo *PriceUpdateOne) Mutation() *PriceMutation {
	return puo.mutation
}

// ClearPriceID clears all "price_id" edges to the RatePrice entity.
func (puo *PriceUpdateOne) ClearPriceID() *PriceUpdateOne {
	puo.mutation.ClearPriceID()
	return puo
}

// RemovePriceIDIDs removes the "price_id" edge to RatePrice entities by IDs.
func (puo *PriceUpdateOne) RemovePriceIDIDs(ids ...uuid.UUID) *PriceUpdateOne {
	puo.mutation.RemovePriceIDIDs(ids...)
	return puo
}

// RemovePriceID removes "price_id" edges to RatePrice entities.
func (puo *PriceUpdateOne) RemovePriceID(r ...*RatePrice) *PriceUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.RemovePriceIDIDs(ids...)
}

// Save executes the query and returns the updated Price entity.
func (puo *PriceUpdateOne) Save(ctx context.Context) (*Price, error) {
	var (
		err  error
		node *Price
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PriceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PriceUpdateOne) SaveX(ctx context.Context) *Price {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PriceUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PriceUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PriceUpdateOne) sqlSave(ctx context.Context) (_node *Price, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   price.Table,
			Columns: price.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: price.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Price.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := puo.mutation.Min(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: price.FieldMin,
		})
	}
	if value, ok := puo.mutation.AddedMin(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: price.FieldMin,
		})
	}
	if value, ok := puo.mutation.Max(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: price.FieldMax,
		})
	}
	if value, ok := puo.mutation.AddedMax(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: price.FieldMax,
		})
	}
	if value, ok := puo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: price.FieldPrice,
		})
	}
	if value, ok := puo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: price.FieldCreateAt,
		})
	}
	if value, ok := puo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: price.FieldUpdateAt,
		})
	}
	if puo.mutation.PriceIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   price.PriceIDTable,
			Columns: []string{price.PriceIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: rateprice.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPriceIDIDs(); len(nodes) > 0 && !puo.mutation.PriceIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   price.PriceIDTable,
			Columns: []string{price.PriceIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: rateprice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PriceIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   price.PriceIDTable,
			Columns: []string{price.PriceIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: rateprice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Price{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{price.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
