// Code generated by entc, DO NOT EDIT.

package provide

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the provide type in the database.
	Label = "provide"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldIPAdres holds the string denoting the ip_adres field in the database.
	FieldIPAdres = "ip_adres"
	// FieldCreateAt holds the string denoting the create_at field in the database.
	FieldCreateAt = "create_at"
	// FieldUpdateAt holds the string denoting the update_at field in the database.
	FieldUpdateAt = "update_at"
	// EdgeProviderID holds the string denoting the provider_id edge name in mutations.
	EdgeProviderID = "provider_id"
	// EdgeMessages holds the string denoting the messages edge name in mutations.
	EdgeMessages = "messages"
	// Table holds the table name of the provide in the database.
	Table = "provides"
	// ProviderIDTable is the table the holds the provider_id relation/edge.
	ProviderIDTable = "user_month_messages"
	// ProviderIDInverseTable is the table name for the UserMonthMessage entity.
	// It exists in this package in order to avoid circular dependency with the "usermonthmessage" package.
	ProviderIDInverseTable = "user_month_messages"
	// ProviderIDColumn is the table column denoting the provider_id relation/edge.
	ProviderIDColumn = "provider_id"
	// MessagesTable is the table the holds the messages relation/edge.
	MessagesTable = "messages"
	// MessagesInverseTable is the table name for the Messages entity.
	// It exists in this package in order to avoid circular dependency with the "messages" package.
	MessagesInverseTable = "messages"
	// MessagesColumn is the table column denoting the messages relation/edge.
	MessagesColumn = "provider_id"
)

// Columns holds all SQL columns for provide fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldIPAdres,
	FieldCreateAt,
	FieldUpdateAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateAt holds the default value on creation for the "create_at" field.
	DefaultCreateAt func() time.Time
	// DefaultUpdateAt holds the default value on creation for the "update_at" field.
	DefaultUpdateAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
