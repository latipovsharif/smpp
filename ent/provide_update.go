// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"smpp/ent/messages"
	"smpp/ent/predicate"
	"smpp/ent/provide"
	"smpp/ent/usermonthmessage"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ProvideUpdate is the builder for updating Provide entities.
type ProvideUpdate struct {
	config
	hooks    []Hook
	mutation *ProvideMutation
}

// Where adds a new predicate for the ProvideUpdate builder.
func (pu *ProvideUpdate) Where(ps ...predicate.Provide) *ProvideUpdate {
	pu.mutation.predicates = append(pu.mutation.predicates, ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *ProvideUpdate) SetName(s string) *ProvideUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetIPAdres sets the "ip_adres" field.
func (pu *ProvideUpdate) SetIPAdres(s string) *ProvideUpdate {
	pu.mutation.SetIPAdres(s)
	return pu
}

// SetCreateAt sets the "create_at" field.
func (pu *ProvideUpdate) SetCreateAt(t time.Time) *ProvideUpdate {
	pu.mutation.SetCreateAt(t)
	return pu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (pu *ProvideUpdate) SetNillableCreateAt(t *time.Time) *ProvideUpdate {
	if t != nil {
		pu.SetCreateAt(*t)
	}
	return pu
}

// SetUpdateAt sets the "update_at" field.
func (pu *ProvideUpdate) SetUpdateAt(t time.Time) *ProvideUpdate {
	pu.mutation.SetUpdateAt(t)
	return pu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (pu *ProvideUpdate) SetNillableUpdateAt(t *time.Time) *ProvideUpdate {
	if t != nil {
		pu.SetUpdateAt(*t)
	}
	return pu
}

// AddProviderIDIDs adds the "provider_id" edge to the UserMonthMessage entity by IDs.
func (pu *ProvideUpdate) AddProviderIDIDs(ids ...uuid.UUID) *ProvideUpdate {
	pu.mutation.AddProviderIDIDs(ids...)
	return pu
}

// AddProviderID adds the "provider_id" edges to the UserMonthMessage entity.
func (pu *ProvideUpdate) AddProviderID(u ...*UserMonthMessage) *ProvideUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.AddProviderIDIDs(ids...)
}

// AddMessageIDs adds the "messages" edge to the Messages entity by IDs.
func (pu *ProvideUpdate) AddMessageIDs(ids ...uuid.UUID) *ProvideUpdate {
	pu.mutation.AddMessageIDs(ids...)
	return pu
}

// AddMessages adds the "messages" edges to the Messages entity.
func (pu *ProvideUpdate) AddMessages(m ...*Messages) *ProvideUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.AddMessageIDs(ids...)
}

// Mutation returns the ProvideMutation object of the builder.
func (pu *ProvideUpdate) Mutation() *ProvideMutation {
	return pu.mutation
}

// ClearProviderID clears all "provider_id" edges to the UserMonthMessage entity.
func (pu *ProvideUpdate) ClearProviderID() *ProvideUpdate {
	pu.mutation.ClearProviderID()
	return pu
}

// RemoveProviderIDIDs removes the "provider_id" edge to UserMonthMessage entities by IDs.
func (pu *ProvideUpdate) RemoveProviderIDIDs(ids ...uuid.UUID) *ProvideUpdate {
	pu.mutation.RemoveProviderIDIDs(ids...)
	return pu
}

// RemoveProviderID removes "provider_id" edges to UserMonthMessage entities.
func (pu *ProvideUpdate) RemoveProviderID(u ...*UserMonthMessage) *ProvideUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.RemoveProviderIDIDs(ids...)
}

// ClearMessages clears all "messages" edges to the Messages entity.
func (pu *ProvideUpdate) ClearMessages() *ProvideUpdate {
	pu.mutation.ClearMessages()
	return pu
}

// RemoveMessageIDs removes the "messages" edge to Messages entities by IDs.
func (pu *ProvideUpdate) RemoveMessageIDs(ids ...uuid.UUID) *ProvideUpdate {
	pu.mutation.RemoveMessageIDs(ids...)
	return pu
}

// RemoveMessages removes "messages" edges to Messages entities.
func (pu *ProvideUpdate) RemoveMessages(m ...*Messages) *ProvideUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.RemoveMessageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProvideUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProvideMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProvideUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProvideUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProvideUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *ProvideUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   provide.Table,
			Columns: provide.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: provide.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: provide.FieldName,
		})
	}
	if value, ok := pu.mutation.IPAdres(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: provide.FieldIPAdres,
		})
	}
	if value, ok := pu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: provide.FieldCreateAt,
		})
	}
	if value, ok := pu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: provide.FieldUpdateAt,
		})
	}
	if pu.mutation.ProviderIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provide.ProviderIDTable,
			Columns: []string{provide.ProviderIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: usermonthmessage.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedProviderIDIDs(); len(nodes) > 0 && !pu.mutation.ProviderIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provide.ProviderIDTable,
			Columns: []string{provide.ProviderIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: usermonthmessage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ProviderIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provide.ProviderIDTable,
			Columns: []string{provide.ProviderIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: usermonthmessage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provide.MessagesTable,
			Columns: []string{provide.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: messages.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !pu.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provide.MessagesTable,
			Columns: []string{provide.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: messages.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provide.MessagesTable,
			Columns: []string{provide.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: messages.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{provide.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProvideUpdateOne is the builder for updating a single Provide entity.
type ProvideUpdateOne struct {
	config
	hooks    []Hook
	mutation *ProvideMutation
}

// SetName sets the "name" field.
func (puo *ProvideUpdateOne) SetName(s string) *ProvideUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetIPAdres sets the "ip_adres" field.
func (puo *ProvideUpdateOne) SetIPAdres(s string) *ProvideUpdateOne {
	puo.mutation.SetIPAdres(s)
	return puo
}

// SetCreateAt sets the "create_at" field.
func (puo *ProvideUpdateOne) SetCreateAt(t time.Time) *ProvideUpdateOne {
	puo.mutation.SetCreateAt(t)
	return puo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (puo *ProvideUpdateOne) SetNillableCreateAt(t *time.Time) *ProvideUpdateOne {
	if t != nil {
		puo.SetCreateAt(*t)
	}
	return puo
}

// SetUpdateAt sets the "update_at" field.
func (puo *ProvideUpdateOne) SetUpdateAt(t time.Time) *ProvideUpdateOne {
	puo.mutation.SetUpdateAt(t)
	return puo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (puo *ProvideUpdateOne) SetNillableUpdateAt(t *time.Time) *ProvideUpdateOne {
	if t != nil {
		puo.SetUpdateAt(*t)
	}
	return puo
}

// AddProviderIDIDs adds the "provider_id" edge to the UserMonthMessage entity by IDs.
func (puo *ProvideUpdateOne) AddProviderIDIDs(ids ...uuid.UUID) *ProvideUpdateOne {
	puo.mutation.AddProviderIDIDs(ids...)
	return puo
}

// AddProviderID adds the "provider_id" edges to the UserMonthMessage entity.
func (puo *ProvideUpdateOne) AddProviderID(u ...*UserMonthMessage) *ProvideUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.AddProviderIDIDs(ids...)
}

// AddMessageIDs adds the "messages" edge to the Messages entity by IDs.
func (puo *ProvideUpdateOne) AddMessageIDs(ids ...uuid.UUID) *ProvideUpdateOne {
	puo.mutation.AddMessageIDs(ids...)
	return puo
}

// AddMessages adds the "messages" edges to the Messages entity.
func (puo *ProvideUpdateOne) AddMessages(m ...*Messages) *ProvideUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.AddMessageIDs(ids...)
}

// Mutation returns the ProvideMutation object of the builder.
func (puo *ProvideUpdateOne) Mutation() *ProvideMutation {
	return puo.mutation
}

// ClearProviderID clears all "provider_id" edges to the UserMonthMessage entity.
func (puo *ProvideUpdateOne) ClearProviderID() *ProvideUpdateOne {
	puo.mutation.ClearProviderID()
	return puo
}

// RemoveProviderIDIDs removes the "provider_id" edge to UserMonthMessage entities by IDs.
func (puo *ProvideUpdateOne) RemoveProviderIDIDs(ids ...uuid.UUID) *ProvideUpdateOne {
	puo.mutation.RemoveProviderIDIDs(ids...)
	return puo
}

// RemoveProviderID removes "provider_id" edges to UserMonthMessage entities.
func (puo *ProvideUpdateOne) RemoveProviderID(u ...*UserMonthMessage) *ProvideUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.RemoveProviderIDIDs(ids...)
}

// ClearMessages clears all "messages" edges to the Messages entity.
func (puo *ProvideUpdateOne) ClearMessages() *ProvideUpdateOne {
	puo.mutation.ClearMessages()
	return puo
}

// RemoveMessageIDs removes the "messages" edge to Messages entities by IDs.
func (puo *ProvideUpdateOne) RemoveMessageIDs(ids ...uuid.UUID) *ProvideUpdateOne {
	puo.mutation.RemoveMessageIDs(ids...)
	return puo
}

// RemoveMessages removes "messages" edges to Messages entities.
func (puo *ProvideUpdateOne) RemoveMessages(m ...*Messages) *ProvideUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.RemoveMessageIDs(ids...)
}

// Save executes the query and returns the updated Provide entity.
func (puo *ProvideUpdateOne) Save(ctx context.Context) (*Provide, error) {
	var (
		err  error
		node *Provide
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProvideMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProvideUpdateOne) SaveX(ctx context.Context) *Provide {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProvideUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProvideUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *ProvideUpdateOne) sqlSave(ctx context.Context) (_node *Provide, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   provide.Table,
			Columns: provide.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: provide.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Provide.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: provide.FieldName,
		})
	}
	if value, ok := puo.mutation.IPAdres(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: provide.FieldIPAdres,
		})
	}
	if value, ok := puo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: provide.FieldCreateAt,
		})
	}
	if value, ok := puo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: provide.FieldUpdateAt,
		})
	}
	if puo.mutation.ProviderIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provide.ProviderIDTable,
			Columns: []string{provide.ProviderIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: usermonthmessage.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedProviderIDIDs(); len(nodes) > 0 && !puo.mutation.ProviderIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provide.ProviderIDTable,
			Columns: []string{provide.ProviderIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: usermonthmessage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ProviderIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provide.ProviderIDTable,
			Columns: []string{provide.ProviderIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: usermonthmessage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provide.MessagesTable,
			Columns: []string{provide.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: messages.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !puo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provide.MessagesTable,
			Columns: []string{provide.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: messages.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provide.MessagesTable,
			Columns: []string{provide.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: messages.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Provide{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{provide.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
