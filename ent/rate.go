// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"smpp/ent/rate"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Rate is the model entity for the Rate schema.
type Rate struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt time.Time `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt time.Time `json:"update_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RateQuery when eager-loading is set.
	Edges RateEdges `json:"edges"`
}

// RateEdges holds the relations/edges for other nodes in the graph.
type RateEdges struct {
	// RateID holds the value of the rate_id edge.
	RateID []*RatePrice `json:"rate_id,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RateIDOrErr returns the RateID value or an error if the edge
// was not loaded in eager-loading.
func (e RateEdges) RateIDOrErr() ([]*RatePrice, error) {
	if e.loadedTypes[0] {
		return e.RateID, nil
	}
	return nil, &NotLoadedError{edge: "rate_id"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Rate) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case rate.FieldName:
			values[i] = &sql.NullString{}
		case rate.FieldCreateAt, rate.FieldUpdateAt:
			values[i] = &sql.NullTime{}
		case rate.FieldID:
			values[i] = &uuid.UUID{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Rate", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Rate fields.
func (r *Rate) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rate.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case rate.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case rate.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				r.CreateAt = value.Time
			}
		case rate.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				r.UpdateAt = value.Time
			}
		}
	}
	return nil
}

// QueryRateID queries the "rate_id" edge of the Rate entity.
func (r *Rate) QueryRateID() *RatePriceQuery {
	return (&RateClient{config: r.config}).QueryRateID(r)
}

// Update returns a builder for updating this Rate.
// Note that you need to call Rate.Unwrap() before calling this method if this Rate
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Rate) Update() *RateUpdateOne {
	return (&RateClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Rate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Rate) Unwrap() *Rate {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Rate is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Rate) String() string {
	var builder strings.Builder
	builder.WriteString("Rate(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", name=")
	builder.WriteString(r.Name)
	builder.WriteString(", create_at=")
	builder.WriteString(r.CreateAt.Format(time.ANSIC))
	builder.WriteString(", update_at=")
	builder.WriteString(r.UpdateAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Rates is a parsable slice of Rate.
type Rates []*Rate

func (r Rates) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
