// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"smpp/ent/rate"
	"smpp/ent/rateprice"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// RateCreate is the builder for creating a Rate entity.
type RateCreate struct {
	config
	mutation *RateMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (rc *RateCreate) SetName(s string) *RateCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetCreateAt sets the "create_at" field.
func (rc *RateCreate) SetCreateAt(t time.Time) *RateCreate {
	rc.mutation.SetCreateAt(t)
	return rc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (rc *RateCreate) SetNillableCreateAt(t *time.Time) *RateCreate {
	if t != nil {
		rc.SetCreateAt(*t)
	}
	return rc
}

// SetUpdateAt sets the "update_at" field.
func (rc *RateCreate) SetUpdateAt(t time.Time) *RateCreate {
	rc.mutation.SetUpdateAt(t)
	return rc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (rc *RateCreate) SetNillableUpdateAt(t *time.Time) *RateCreate {
	if t != nil {
		rc.SetUpdateAt(*t)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *RateCreate) SetID(u uuid.UUID) *RateCreate {
	rc.mutation.SetID(u)
	return rc
}

// AddRateIDIDs adds the "rate_id" edge to the RatePrice entity by IDs.
func (rc *RateCreate) AddRateIDIDs(ids ...uuid.UUID) *RateCreate {
	rc.mutation.AddRateIDIDs(ids...)
	return rc
}

// AddRateID adds the "rate_id" edges to the RatePrice entity.
func (rc *RateCreate) AddRateID(r ...*RatePrice) *RateCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rc.AddRateIDIDs(ids...)
}

// Mutation returns the RateMutation object of the builder.
func (rc *RateCreate) Mutation() *RateMutation {
	return rc.mutation
}

// Save creates the Rate in the database.
func (rc *RateCreate) Save(ctx context.Context) (*Rate, error) {
	var (
		err  error
		node *Rate
	)
	rc.defaults()
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			node, err = rc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RateCreate) SaveX(ctx context.Context) *Rate {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (rc *RateCreate) defaults() {
	if _, ok := rc.mutation.CreateAt(); !ok {
		v := rate.DefaultCreateAt()
		rc.mutation.SetCreateAt(v)
	}
	if _, ok := rc.mutation.UpdateAt(); !ok {
		v := rate.DefaultUpdateAt()
		rc.mutation.SetUpdateAt(v)
	}
	if _, ok := rc.mutation.ID(); !ok {
		v := rate.DefaultID()
		rc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RateCreate) check() error {
	if _, ok := rc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := rc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New("ent: missing required field \"create_at\"")}
	}
	if _, ok := rc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New("ent: missing required field \"update_at\"")}
	}
	return nil
}

func (rc *RateCreate) sqlSave(ctx context.Context) (*Rate, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

func (rc *RateCreate) createSpec() (*Rate, *sqlgraph.CreateSpec) {
	var (
		_node = &Rate{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: rate.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: rate.FieldID,
			},
		}
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rate.FieldName,
		})
		_node.Name = value
	}
	if value, ok := rc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rate.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := rc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rate.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if nodes := rc.mutation.RateIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rate.RateIDTable,
			Columns: []string{rate.RateIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: rateprice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RateCreateBulk is the builder for creating many Rate entities in bulk.
type RateCreateBulk struct {
	config
	builders []*RateCreate
}

// Save creates the Rate entities in the database.
func (rcb *RateCreateBulk) Save(ctx context.Context) ([]*Rate, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Rate, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RateCreateBulk) SaveX(ctx context.Context) []*Rate {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
