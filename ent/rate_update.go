// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"smpp/ent/predicate"
	"smpp/ent/rate"
	"smpp/ent/rateprice"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// RateUpdate is the builder for updating Rate entities.
type RateUpdate struct {
	config
	hooks    []Hook
	mutation *RateMutation
}

// Where adds a new predicate for the RateUpdate builder.
func (ru *RateUpdate) Where(ps ...predicate.Rate) *RateUpdate {
	ru.mutation.predicates = append(ru.mutation.predicates, ps...)
	return ru
}

// SetName sets the "name" field.
func (ru *RateUpdate) SetName(s string) *RateUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetCreateAt sets the "create_at" field.
func (ru *RateUpdate) SetCreateAt(t time.Time) *RateUpdate {
	ru.mutation.SetCreateAt(t)
	return ru
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ru *RateUpdate) SetNillableCreateAt(t *time.Time) *RateUpdate {
	if t != nil {
		ru.SetCreateAt(*t)
	}
	return ru
}

// SetUpdateAt sets the "update_at" field.
func (ru *RateUpdate) SetUpdateAt(t time.Time) *RateUpdate {
	ru.mutation.SetUpdateAt(t)
	return ru
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ru *RateUpdate) SetNillableUpdateAt(t *time.Time) *RateUpdate {
	if t != nil {
		ru.SetUpdateAt(*t)
	}
	return ru
}

// AddRateIDIDs adds the "rate_id" edge to the RatePrice entity by IDs.
func (ru *RateUpdate) AddRateIDIDs(ids ...uuid.UUID) *RateUpdate {
	ru.mutation.AddRateIDIDs(ids...)
	return ru
}

// AddRateID adds the "rate_id" edges to the RatePrice entity.
func (ru *RateUpdate) AddRateID(r ...*RatePrice) *RateUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddRateIDIDs(ids...)
}

// Mutation returns the RateMutation object of the builder.
func (ru *RateUpdate) Mutation() *RateMutation {
	return ru.mutation
}

// ClearRateID clears all "rate_id" edges to the RatePrice entity.
func (ru *RateUpdate) ClearRateID() *RateUpdate {
	ru.mutation.ClearRateID()
	return ru
}

// RemoveRateIDIDs removes the "rate_id" edge to RatePrice entities by IDs.
func (ru *RateUpdate) RemoveRateIDIDs(ids ...uuid.UUID) *RateUpdate {
	ru.mutation.RemoveRateIDIDs(ids...)
	return ru
}

// RemoveRateID removes "rate_id" edges to RatePrice entities.
func (ru *RateUpdate) RemoveRateID(r ...*RatePrice) *RateUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveRateIDIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RateUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RateUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RateUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RateUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rate.Table,
			Columns: rate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: rate.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rate.FieldName,
		})
	}
	if value, ok := ru.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rate.FieldCreateAt,
		})
	}
	if value, ok := ru.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rate.FieldUpdateAt,
		})
	}
	if ru.mutation.RateIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rate.RateIDTable,
			Columns: []string{rate.RateIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: rateprice.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedRateIDIDs(); len(nodes) > 0 && !ru.mutation.RateIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rate.RateIDTable,
			Columns: []string{rate.RateIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: rateprice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RateIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rate.RateIDTable,
			Columns: []string{rate.RateIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: rateprice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rate.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RateUpdateOne is the builder for updating a single Rate entity.
type RateUpdateOne struct {
	config
	hooks    []Hook
	mutation *RateMutation
}

// SetName sets the "name" field.
func (ruo *RateUpdateOne) SetName(s string) *RateUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetCreateAt sets the "create_at" field.
func (ruo *RateUpdateOne) SetCreateAt(t time.Time) *RateUpdateOne {
	ruo.mutation.SetCreateAt(t)
	return ruo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ruo *RateUpdateOne) SetNillableCreateAt(t *time.Time) *RateUpdateOne {
	if t != nil {
		ruo.SetCreateAt(*t)
	}
	return ruo
}

// SetUpdateAt sets the "update_at" field.
func (ruo *RateUpdateOne) SetUpdateAt(t time.Time) *RateUpdateOne {
	ruo.mutation.SetUpdateAt(t)
	return ruo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ruo *RateUpdateOne) SetNillableUpdateAt(t *time.Time) *RateUpdateOne {
	if t != nil {
		ruo.SetUpdateAt(*t)
	}
	return ruo
}

// AddRateIDIDs adds the "rate_id" edge to the RatePrice entity by IDs.
func (ruo *RateUpdateOne) AddRateIDIDs(ids ...uuid.UUID) *RateUpdateOne {
	ruo.mutation.AddRateIDIDs(ids...)
	return ruo
}

// AddRateID adds the "rate_id" edges to the RatePrice entity.
func (ruo *RateUpdateOne) AddRateID(r ...*RatePrice) *RateUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddRateIDIDs(ids...)
}

// Mutation returns the RateMutation object of the builder.
func (ruo *RateUpdateOne) Mutation() *RateMutation {
	return ruo.mutation
}

// ClearRateID clears all "rate_id" edges to the RatePrice entity.
func (ruo *RateUpdateOne) ClearRateID() *RateUpdateOne {
	ruo.mutation.ClearRateID()
	return ruo
}

// RemoveRateIDIDs removes the "rate_id" edge to RatePrice entities by IDs.
func (ruo *RateUpdateOne) RemoveRateIDIDs(ids ...uuid.UUID) *RateUpdateOne {
	ruo.mutation.RemoveRateIDIDs(ids...)
	return ruo
}

// RemoveRateID removes "rate_id" edges to RatePrice entities.
func (ruo *RateUpdateOne) RemoveRateID(r ...*RatePrice) *RateUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveRateIDIDs(ids...)
}

// Save executes the query and returns the updated Rate entity.
func (ruo *RateUpdateOne) Save(ctx context.Context) (*Rate, error) {
	var (
		err  error
		node *Rate
	)
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RateUpdateOne) SaveX(ctx context.Context) *Rate {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RateUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RateUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RateUpdateOne) sqlSave(ctx context.Context) (_node *Rate, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rate.Table,
			Columns: rate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: rate.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Rate.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rate.FieldName,
		})
	}
	if value, ok := ruo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rate.FieldCreateAt,
		})
	}
	if value, ok := ruo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rate.FieldUpdateAt,
		})
	}
	if ruo.mutation.RateIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rate.RateIDTable,
			Columns: []string{rate.RateIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: rateprice.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedRateIDIDs(); len(nodes) > 0 && !ruo.mutation.RateIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rate.RateIDTable,
			Columns: []string{rate.RateIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: rateprice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RateIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rate.RateIDTable,
			Columns: []string{rate.RateIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: rateprice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Rate{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rate.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
