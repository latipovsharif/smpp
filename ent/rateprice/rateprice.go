// Code generated by entc, DO NOT EDIT.

package rateprice

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the rateprice type in the database.
	Label = "rate_price"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateAt holds the string denoting the create_at field in the database.
	FieldCreateAt = "create_at"
	// FieldUpdateAt holds the string denoting the update_at field in the database.
	FieldUpdateAt = "update_at"
	// EdgeIDRate holds the string denoting the id_rate edge name in mutations.
	EdgeIDRate = "id_rate"
	// EdgeIDPrice holds the string denoting the id_price edge name in mutations.
	EdgeIDPrice = "id_price"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the rateprice in the database.
	Table = "rate_prices"
	// IDRateTable is the table the holds the id_rate relation/edge.
	IDRateTable = "rate_prices"
	// IDRateInverseTable is the table name for the Rate entity.
	// It exists in this package in order to avoid circular dependency with the "rate" package.
	IDRateInverseTable = "rates"
	// IDRateColumn is the table column denoting the id_rate relation/edge.
	IDRateColumn = "rate_id"
	// IDPriceTable is the table the holds the id_price relation/edge.
	IDPriceTable = "rate_prices"
	// IDPriceInverseTable is the table name for the Price entity.
	// It exists in this package in order to avoid circular dependency with the "price" package.
	IDPriceInverseTable = "prices"
	// IDPriceColumn is the table column denoting the id_price relation/edge.
	IDPriceColumn = "price_id"
	// UserTable is the table the holds the user relation/edge.
	UserTable = "users"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "rate_id"
)

// Columns holds all SQL columns for rateprice fields.
var Columns = []string{
	FieldID,
	FieldCreateAt,
	FieldUpdateAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "rate_prices"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"price_id",
	"rate_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateAt holds the default value on creation for the "create_at" field.
	DefaultCreateAt func() time.Time
	// DefaultUpdateAt holds the default value on creation for the "update_at" field.
	DefaultUpdateAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
