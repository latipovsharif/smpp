// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"smpp/ent/price"
	"smpp/ent/rate"
	"smpp/ent/rateprice"
	"smpp/ent/user"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// RatePriceCreate is the builder for creating a RatePrice entity.
type RatePriceCreate struct {
	config
	mutation *RatePriceMutation
	hooks    []Hook
}

// SetCreateAt sets the "create_at" field.
func (rpc *RatePriceCreate) SetCreateAt(t time.Time) *RatePriceCreate {
	rpc.mutation.SetCreateAt(t)
	return rpc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (rpc *RatePriceCreate) SetNillableCreateAt(t *time.Time) *RatePriceCreate {
	if t != nil {
		rpc.SetCreateAt(*t)
	}
	return rpc
}

// SetUpdateAt sets the "update_at" field.
func (rpc *RatePriceCreate) SetUpdateAt(t time.Time) *RatePriceCreate {
	rpc.mutation.SetUpdateAt(t)
	return rpc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (rpc *RatePriceCreate) SetNillableUpdateAt(t *time.Time) *RatePriceCreate {
	if t != nil {
		rpc.SetUpdateAt(*t)
	}
	return rpc
}

// SetID sets the "id" field.
func (rpc *RatePriceCreate) SetID(u uuid.UUID) *RatePriceCreate {
	rpc.mutation.SetID(u)
	return rpc
}

// SetIDRateID sets the "id_rate" edge to the Rate entity by ID.
func (rpc *RatePriceCreate) SetIDRateID(id uuid.UUID) *RatePriceCreate {
	rpc.mutation.SetIDRateID(id)
	return rpc
}

// SetNillableIDRateID sets the "id_rate" edge to the Rate entity by ID if the given value is not nil.
func (rpc *RatePriceCreate) SetNillableIDRateID(id *uuid.UUID) *RatePriceCreate {
	if id != nil {
		rpc = rpc.SetIDRateID(*id)
	}
	return rpc
}

// SetIDRate sets the "id_rate" edge to the Rate entity.
func (rpc *RatePriceCreate) SetIDRate(r *Rate) *RatePriceCreate {
	return rpc.SetIDRateID(r.ID)
}

// SetIDPriceID sets the "id_price" edge to the Price entity by ID.
func (rpc *RatePriceCreate) SetIDPriceID(id uuid.UUID) *RatePriceCreate {
	rpc.mutation.SetIDPriceID(id)
	return rpc
}

// SetNillableIDPriceID sets the "id_price" edge to the Price entity by ID if the given value is not nil.
func (rpc *RatePriceCreate) SetNillableIDPriceID(id *uuid.UUID) *RatePriceCreate {
	if id != nil {
		rpc = rpc.SetIDPriceID(*id)
	}
	return rpc
}

// SetIDPrice sets the "id_price" edge to the Price entity.
func (rpc *RatePriceCreate) SetIDPrice(p *Price) *RatePriceCreate {
	return rpc.SetIDPriceID(p.ID)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (rpc *RatePriceCreate) AddUserIDs(ids ...uuid.UUID) *RatePriceCreate {
	rpc.mutation.AddUserIDs(ids...)
	return rpc
}

// AddUser adds the "user" edges to the User entity.
func (rpc *RatePriceCreate) AddUser(u ...*User) *RatePriceCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return rpc.AddUserIDs(ids...)
}

// Mutation returns the RatePriceMutation object of the builder.
func (rpc *RatePriceCreate) Mutation() *RatePriceMutation {
	return rpc.mutation
}

// Save creates the RatePrice in the database.
func (rpc *RatePriceCreate) Save(ctx context.Context) (*RatePrice, error) {
	var (
		err  error
		node *RatePrice
	)
	rpc.defaults()
	if len(rpc.hooks) == 0 {
		if err = rpc.check(); err != nil {
			return nil, err
		}
		node, err = rpc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RatePriceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rpc.check(); err != nil {
				return nil, err
			}
			rpc.mutation = mutation
			node, err = rpc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rpc.hooks) - 1; i >= 0; i-- {
			mut = rpc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rpc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rpc *RatePriceCreate) SaveX(ctx context.Context) *RatePrice {
	v, err := rpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (rpc *RatePriceCreate) defaults() {
	if _, ok := rpc.mutation.CreateAt(); !ok {
		v := rateprice.DefaultCreateAt()
		rpc.mutation.SetCreateAt(v)
	}
	if _, ok := rpc.mutation.UpdateAt(); !ok {
		v := rateprice.DefaultUpdateAt()
		rpc.mutation.SetUpdateAt(v)
	}
	if _, ok := rpc.mutation.ID(); !ok {
		v := rateprice.DefaultID()
		rpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpc *RatePriceCreate) check() error {
	if _, ok := rpc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New("ent: missing required field \"create_at\"")}
	}
	if _, ok := rpc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New("ent: missing required field \"update_at\"")}
	}
	return nil
}

func (rpc *RatePriceCreate) sqlSave(ctx context.Context) (*RatePrice, error) {
	_node, _spec := rpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rpc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

func (rpc *RatePriceCreate) createSpec() (*RatePrice, *sqlgraph.CreateSpec) {
	var (
		_node = &RatePrice{config: rpc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: rateprice.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: rateprice.FieldID,
			},
		}
	)
	if id, ok := rpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rpc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rateprice.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := rpc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rateprice.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if nodes := rpc.mutation.IDRateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rateprice.IDRateTable,
			Columns: []string{rateprice.IDRateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: rate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rpc.mutation.IDPriceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rateprice.IDPriceTable,
			Columns: []string{rateprice.IDPriceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: price.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rpc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rateprice.UserTable,
			Columns: []string{rateprice.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RatePriceCreateBulk is the builder for creating many RatePrice entities in bulk.
type RatePriceCreateBulk struct {
	config
	builders []*RatePriceCreate
}

// Save creates the RatePrice entities in the database.
func (rpcb *RatePriceCreateBulk) Save(ctx context.Context) ([]*RatePrice, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rpcb.builders))
	nodes := make([]*RatePrice, len(rpcb.builders))
	mutators := make([]Mutator, len(rpcb.builders))
	for i := range rpcb.builders {
		func(i int, root context.Context) {
			builder := rpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RatePriceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rpcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rpcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rpcb *RatePriceCreateBulk) SaveX(ctx context.Context) []*RatePrice {
	v, err := rpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
