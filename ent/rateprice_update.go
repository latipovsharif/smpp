// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"smpp/ent/predicate"
	"smpp/ent/price"
	"smpp/ent/rate"
	"smpp/ent/rateprice"
	"smpp/ent/user"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// RatePriceUpdate is the builder for updating RatePrice entities.
type RatePriceUpdate struct {
	config
	hooks    []Hook
	mutation *RatePriceMutation
}

// Where adds a new predicate for the RatePriceUpdate builder.
func (rpu *RatePriceUpdate) Where(ps ...predicate.RatePrice) *RatePriceUpdate {
	rpu.mutation.predicates = append(rpu.mutation.predicates, ps...)
	return rpu
}

// SetCreateAt sets the "create_at" field.
func (rpu *RatePriceUpdate) SetCreateAt(t time.Time) *RatePriceUpdate {
	rpu.mutation.SetCreateAt(t)
	return rpu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (rpu *RatePriceUpdate) SetNillableCreateAt(t *time.Time) *RatePriceUpdate {
	if t != nil {
		rpu.SetCreateAt(*t)
	}
	return rpu
}

// SetUpdateAt sets the "update_at" field.
func (rpu *RatePriceUpdate) SetUpdateAt(t time.Time) *RatePriceUpdate {
	rpu.mutation.SetUpdateAt(t)
	return rpu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (rpu *RatePriceUpdate) SetNillableUpdateAt(t *time.Time) *RatePriceUpdate {
	if t != nil {
		rpu.SetUpdateAt(*t)
	}
	return rpu
}

// SetIDRateID sets the "id_rate" edge to the Rate entity by ID.
func (rpu *RatePriceUpdate) SetIDRateID(id uuid.UUID) *RatePriceUpdate {
	rpu.mutation.SetIDRateID(id)
	return rpu
}

// SetNillableIDRateID sets the "id_rate" edge to the Rate entity by ID if the given value is not nil.
func (rpu *RatePriceUpdate) SetNillableIDRateID(id *uuid.UUID) *RatePriceUpdate {
	if id != nil {
		rpu = rpu.SetIDRateID(*id)
	}
	return rpu
}

// SetIDRate sets the "id_rate" edge to the Rate entity.
func (rpu *RatePriceUpdate) SetIDRate(r *Rate) *RatePriceUpdate {
	return rpu.SetIDRateID(r.ID)
}

// SetIDPriceID sets the "id_price" edge to the Price entity by ID.
func (rpu *RatePriceUpdate) SetIDPriceID(id uuid.UUID) *RatePriceUpdate {
	rpu.mutation.SetIDPriceID(id)
	return rpu
}

// SetNillableIDPriceID sets the "id_price" edge to the Price entity by ID if the given value is not nil.
func (rpu *RatePriceUpdate) SetNillableIDPriceID(id *uuid.UUID) *RatePriceUpdate {
	if id != nil {
		rpu = rpu.SetIDPriceID(*id)
	}
	return rpu
}

// SetIDPrice sets the "id_price" edge to the Price entity.
func (rpu *RatePriceUpdate) SetIDPrice(p *Price) *RatePriceUpdate {
	return rpu.SetIDPriceID(p.ID)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (rpu *RatePriceUpdate) AddUserIDs(ids ...uuid.UUID) *RatePriceUpdate {
	rpu.mutation.AddUserIDs(ids...)
	return rpu
}

// AddUser adds the "user" edges to the User entity.
func (rpu *RatePriceUpdate) AddUser(u ...*User) *RatePriceUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return rpu.AddUserIDs(ids...)
}

// Mutation returns the RatePriceMutation object of the builder.
func (rpu *RatePriceUpdate) Mutation() *RatePriceMutation {
	return rpu.mutation
}

// ClearIDRate clears the "id_rate" edge to the Rate entity.
func (rpu *RatePriceUpdate) ClearIDRate() *RatePriceUpdate {
	rpu.mutation.ClearIDRate()
	return rpu
}

// ClearIDPrice clears the "id_price" edge to the Price entity.
func (rpu *RatePriceUpdate) ClearIDPrice() *RatePriceUpdate {
	rpu.mutation.ClearIDPrice()
	return rpu
}

// ClearUser clears all "user" edges to the User entity.
func (rpu *RatePriceUpdate) ClearUser() *RatePriceUpdate {
	rpu.mutation.ClearUser()
	return rpu
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (rpu *RatePriceUpdate) RemoveUserIDs(ids ...uuid.UUID) *RatePriceUpdate {
	rpu.mutation.RemoveUserIDs(ids...)
	return rpu
}

// RemoveUser removes "user" edges to User entities.
func (rpu *RatePriceUpdate) RemoveUser(u ...*User) *RatePriceUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return rpu.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rpu *RatePriceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(rpu.hooks) == 0 {
		affected, err = rpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RatePriceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rpu.mutation = mutation
			affected, err = rpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rpu.hooks) - 1; i >= 0; i-- {
			mut = rpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rpu *RatePriceUpdate) SaveX(ctx context.Context) int {
	affected, err := rpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rpu *RatePriceUpdate) Exec(ctx context.Context) error {
	_, err := rpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpu *RatePriceUpdate) ExecX(ctx context.Context) {
	if err := rpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rpu *RatePriceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rateprice.Table,
			Columns: rateprice.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: rateprice.FieldID,
			},
		},
	}
	if ps := rpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rateprice.FieldCreateAt,
		})
	}
	if value, ok := rpu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rateprice.FieldUpdateAt,
		})
	}
	if rpu.mutation.IDRateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rateprice.IDRateTable,
			Columns: []string{rateprice.IDRateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: rate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.IDRateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rateprice.IDRateTable,
			Columns: []string{rateprice.IDRateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: rate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpu.mutation.IDPriceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rateprice.IDPriceTable,
			Columns: []string{rateprice.IDPriceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: price.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.IDPriceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rateprice.IDPriceTable,
			Columns: []string{rateprice.IDPriceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: price.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rateprice.UserTable,
			Columns: []string{rateprice.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.RemovedUserIDs(); len(nodes) > 0 && !rpu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rateprice.UserTable,
			Columns: []string{rateprice.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rateprice.UserTable,
			Columns: []string{rateprice.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rateprice.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RatePriceUpdateOne is the builder for updating a single RatePrice entity.
type RatePriceUpdateOne struct {
	config
	hooks    []Hook
	mutation *RatePriceMutation
}

// SetCreateAt sets the "create_at" field.
func (rpuo *RatePriceUpdateOne) SetCreateAt(t time.Time) *RatePriceUpdateOne {
	rpuo.mutation.SetCreateAt(t)
	return rpuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (rpuo *RatePriceUpdateOne) SetNillableCreateAt(t *time.Time) *RatePriceUpdateOne {
	if t != nil {
		rpuo.SetCreateAt(*t)
	}
	return rpuo
}

// SetUpdateAt sets the "update_at" field.
func (rpuo *RatePriceUpdateOne) SetUpdateAt(t time.Time) *RatePriceUpdateOne {
	rpuo.mutation.SetUpdateAt(t)
	return rpuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (rpuo *RatePriceUpdateOne) SetNillableUpdateAt(t *time.Time) *RatePriceUpdateOne {
	if t != nil {
		rpuo.SetUpdateAt(*t)
	}
	return rpuo
}

// SetIDRateID sets the "id_rate" edge to the Rate entity by ID.
func (rpuo *RatePriceUpdateOne) SetIDRateID(id uuid.UUID) *RatePriceUpdateOne {
	rpuo.mutation.SetIDRateID(id)
	return rpuo
}

// SetNillableIDRateID sets the "id_rate" edge to the Rate entity by ID if the given value is not nil.
func (rpuo *RatePriceUpdateOne) SetNillableIDRateID(id *uuid.UUID) *RatePriceUpdateOne {
	if id != nil {
		rpuo = rpuo.SetIDRateID(*id)
	}
	return rpuo
}

// SetIDRate sets the "id_rate" edge to the Rate entity.
func (rpuo *RatePriceUpdateOne) SetIDRate(r *Rate) *RatePriceUpdateOne {
	return rpuo.SetIDRateID(r.ID)
}

// SetIDPriceID sets the "id_price" edge to the Price entity by ID.
func (rpuo *RatePriceUpdateOne) SetIDPriceID(id uuid.UUID) *RatePriceUpdateOne {
	rpuo.mutation.SetIDPriceID(id)
	return rpuo
}

// SetNillableIDPriceID sets the "id_price" edge to the Price entity by ID if the given value is not nil.
func (rpuo *RatePriceUpdateOne) SetNillableIDPriceID(id *uuid.UUID) *RatePriceUpdateOne {
	if id != nil {
		rpuo = rpuo.SetIDPriceID(*id)
	}
	return rpuo
}

// SetIDPrice sets the "id_price" edge to the Price entity.
func (rpuo *RatePriceUpdateOne) SetIDPrice(p *Price) *RatePriceUpdateOne {
	return rpuo.SetIDPriceID(p.ID)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (rpuo *RatePriceUpdateOne) AddUserIDs(ids ...uuid.UUID) *RatePriceUpdateOne {
	rpuo.mutation.AddUserIDs(ids...)
	return rpuo
}

// AddUser adds the "user" edges to the User entity.
func (rpuo *RatePriceUpdateOne) AddUser(u ...*User) *RatePriceUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return rpuo.AddUserIDs(ids...)
}

// Mutation returns the RatePriceMutation object of the builder.
func (rpuo *RatePriceUpdateOne) Mutation() *RatePriceMutation {
	return rpuo.mutation
}

// ClearIDRate clears the "id_rate" edge to the Rate entity.
func (rpuo *RatePriceUpdateOne) ClearIDRate() *RatePriceUpdateOne {
	rpuo.mutation.ClearIDRate()
	return rpuo
}

// ClearIDPrice clears the "id_price" edge to the Price entity.
func (rpuo *RatePriceUpdateOne) ClearIDPrice() *RatePriceUpdateOne {
	rpuo.mutation.ClearIDPrice()
	return rpuo
}

// ClearUser clears all "user" edges to the User entity.
func (rpuo *RatePriceUpdateOne) ClearUser() *RatePriceUpdateOne {
	rpuo.mutation.ClearUser()
	return rpuo
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (rpuo *RatePriceUpdateOne) RemoveUserIDs(ids ...uuid.UUID) *RatePriceUpdateOne {
	rpuo.mutation.RemoveUserIDs(ids...)
	return rpuo
}

// RemoveUser removes "user" edges to User entities.
func (rpuo *RatePriceUpdateOne) RemoveUser(u ...*User) *RatePriceUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return rpuo.RemoveUserIDs(ids...)
}

// Save executes the query and returns the updated RatePrice entity.
func (rpuo *RatePriceUpdateOne) Save(ctx context.Context) (*RatePrice, error) {
	var (
		err  error
		node *RatePrice
	)
	if len(rpuo.hooks) == 0 {
		node, err = rpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RatePriceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rpuo.mutation = mutation
			node, err = rpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rpuo.hooks) - 1; i >= 0; i-- {
			mut = rpuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rpuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rpuo *RatePriceUpdateOne) SaveX(ctx context.Context) *RatePrice {
	node, err := rpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rpuo *RatePriceUpdateOne) Exec(ctx context.Context) error {
	_, err := rpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpuo *RatePriceUpdateOne) ExecX(ctx context.Context) {
	if err := rpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rpuo *RatePriceUpdateOne) sqlSave(ctx context.Context) (_node *RatePrice, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rateprice.Table,
			Columns: rateprice.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: rateprice.FieldID,
			},
		},
	}
	id, ok := rpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing RatePrice.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := rpuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rateprice.FieldCreateAt,
		})
	}
	if value, ok := rpuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rateprice.FieldUpdateAt,
		})
	}
	if rpuo.mutation.IDRateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rateprice.IDRateTable,
			Columns: []string{rateprice.IDRateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: rate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.IDRateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rateprice.IDRateTable,
			Columns: []string{rateprice.IDRateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: rate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpuo.mutation.IDPriceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rateprice.IDPriceTable,
			Columns: []string{rateprice.IDPriceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: price.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.IDPriceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rateprice.IDPriceTable,
			Columns: []string{rateprice.IDPriceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: price.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rateprice.UserTable,
			Columns: []string{rateprice.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.RemovedUserIDs(); len(nodes) > 0 && !rpuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rateprice.UserTable,
			Columns: []string{rateprice.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rateprice.UserTable,
			Columns: []string{rateprice.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RatePrice{config: rpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rateprice.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
