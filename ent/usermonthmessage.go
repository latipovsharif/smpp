// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"smpp/ent/provide"
	"smpp/ent/user"
	"smpp/ent/usermonthmessage"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// UserMonthMessage is the model entity for the UserMonthMessage schema.
type UserMonthMessage struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Month holds the value of the "month" field.
	Month time.Time `json:"month,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt time.Time `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt time.Time `json:"update_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserMonthMessageQuery when eager-loading is set.
	Edges       UserMonthMessageEdges `json:"edges"`
	provider_id *uuid.UUID
	user_id     *uuid.UUID
}

// UserMonthMessageEdges holds the relations/edges for other nodes in the graph.
type UserMonthMessageEdges struct {
	// ProviderID holds the value of the provider_id edge.
	ProviderID *Provide `json:"provider_id,omitempty"`
	// UserID holds the value of the user_id edge.
	UserID *User `json:"user_id,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProviderIDOrErr returns the ProviderID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserMonthMessageEdges) ProviderIDOrErr() (*Provide, error) {
	if e.loadedTypes[0] {
		if e.ProviderID == nil {
			// The edge provider_id was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: provide.Label}
		}
		return e.ProviderID, nil
	}
	return nil, &NotLoadedError{edge: "provider_id"}
}

// UserIDOrErr returns the UserID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserMonthMessageEdges) UserIDOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.UserID == nil {
			// The edge user_id was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.UserID, nil
	}
	return nil, &NotLoadedError{edge: "user_id"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserMonthMessage) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case usermonthmessage.FieldMonth, usermonthmessage.FieldCreateAt, usermonthmessage.FieldUpdateAt:
			values[i] = &sql.NullTime{}
		case usermonthmessage.FieldID:
			values[i] = &uuid.UUID{}
		case usermonthmessage.ForeignKeys[0]: // provider_id
			values[i] = &uuid.UUID{}
		case usermonthmessage.ForeignKeys[1]: // user_id
			values[i] = &uuid.UUID{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserMonthMessage", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserMonthMessage fields.
func (umm *UserMonthMessage) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usermonthmessage.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				umm.ID = *value
			}
		case usermonthmessage.FieldMonth:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field month", values[i])
			} else if value.Valid {
				umm.Month = value.Time
			}
		case usermonthmessage.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				umm.CreateAt = value.Time
			}
		case usermonthmessage.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				umm.UpdateAt = value.Time
			}
		case usermonthmessage.ForeignKeys[0]:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field provider_id", values[i])
			} else if value != nil {
				umm.provider_id = value
			}
		case usermonthmessage.ForeignKeys[1]:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				umm.user_id = value
			}
		}
	}
	return nil
}

// QueryProviderID queries the "provider_id" edge of the UserMonthMessage entity.
func (umm *UserMonthMessage) QueryProviderID() *ProvideQuery {
	return (&UserMonthMessageClient{config: umm.config}).QueryProviderID(umm)
}

// QueryUserID queries the "user_id" edge of the UserMonthMessage entity.
func (umm *UserMonthMessage) QueryUserID() *UserQuery {
	return (&UserMonthMessageClient{config: umm.config}).QueryUserID(umm)
}

// Update returns a builder for updating this UserMonthMessage.
// Note that you need to call UserMonthMessage.Unwrap() before calling this method if this UserMonthMessage
// was returned from a transaction, and the transaction was committed or rolled back.
func (umm *UserMonthMessage) Update() *UserMonthMessageUpdateOne {
	return (&UserMonthMessageClient{config: umm.config}).UpdateOne(umm)
}

// Unwrap unwraps the UserMonthMessage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (umm *UserMonthMessage) Unwrap() *UserMonthMessage {
	tx, ok := umm.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserMonthMessage is not a transactional entity")
	}
	umm.config.driver = tx.drv
	return umm
}

// String implements the fmt.Stringer.
func (umm *UserMonthMessage) String() string {
	var builder strings.Builder
	builder.WriteString("UserMonthMessage(")
	builder.WriteString(fmt.Sprintf("id=%v", umm.ID))
	builder.WriteString(", month=")
	builder.WriteString(umm.Month.Format(time.ANSIC))
	builder.WriteString(", create_at=")
	builder.WriteString(umm.CreateAt.Format(time.ANSIC))
	builder.WriteString(", update_at=")
	builder.WriteString(umm.UpdateAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserMonthMessages is a parsable slice of UserMonthMessage.
type UserMonthMessages []*UserMonthMessage

func (umm UserMonthMessages) config(cfg config) {
	for _i := range umm {
		umm[_i].config = cfg
	}
}
