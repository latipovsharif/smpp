// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"
	"smpp/ent/predicate"
	"smpp/ent/provide"
	"smpp/ent/user"
	"smpp/ent/usermonthmessage"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UserMonthMessageQuery is the builder for querying UserMonthMessage entities.
type UserMonthMessageQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	fields     []string
	predicates []predicate.UserMonthMessage
	// eager-loading edges.
	withProviderID *ProvideQuery
	withUserID     *UserQuery
	withFKs        bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserMonthMessageQuery builder.
func (ummq *UserMonthMessageQuery) Where(ps ...predicate.UserMonthMessage) *UserMonthMessageQuery {
	ummq.predicates = append(ummq.predicates, ps...)
	return ummq
}

// Limit adds a limit step to the query.
func (ummq *UserMonthMessageQuery) Limit(limit int) *UserMonthMessageQuery {
	ummq.limit = &limit
	return ummq
}

// Offset adds an offset step to the query.
func (ummq *UserMonthMessageQuery) Offset(offset int) *UserMonthMessageQuery {
	ummq.offset = &offset
	return ummq
}

// Order adds an order step to the query.
func (ummq *UserMonthMessageQuery) Order(o ...OrderFunc) *UserMonthMessageQuery {
	ummq.order = append(ummq.order, o...)
	return ummq
}

// QueryProviderID chains the current query on the "provider_id" edge.
func (ummq *UserMonthMessageQuery) QueryProviderID() *ProvideQuery {
	query := &ProvideQuery{config: ummq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ummq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ummq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(usermonthmessage.Table, usermonthmessage.FieldID, selector),
			sqlgraph.To(provide.Table, provide.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usermonthmessage.ProviderIDTable, usermonthmessage.ProviderIDColumn),
		)
		fromU = sqlgraph.SetNeighbors(ummq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserID chains the current query on the "user_id" edge.
func (ummq *UserMonthMessageQuery) QueryUserID() *UserQuery {
	query := &UserQuery{config: ummq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ummq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ummq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(usermonthmessage.Table, usermonthmessage.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usermonthmessage.UserIDTable, usermonthmessage.UserIDColumn),
		)
		fromU = sqlgraph.SetNeighbors(ummq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UserMonthMessage entity from the query.
// Returns a *NotFoundError when no UserMonthMessage was found.
func (ummq *UserMonthMessageQuery) First(ctx context.Context) (*UserMonthMessage, error) {
	nodes, err := ummq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{usermonthmessage.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ummq *UserMonthMessageQuery) FirstX(ctx context.Context) *UserMonthMessage {
	node, err := ummq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UserMonthMessage ID from the query.
// Returns a *NotFoundError when no UserMonthMessage ID was found.
func (ummq *UserMonthMessageQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ummq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{usermonthmessage.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ummq *UserMonthMessageQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := ummq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UserMonthMessage entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one UserMonthMessage entity is not found.
// Returns a *NotFoundError when no UserMonthMessage entities are found.
func (ummq *UserMonthMessageQuery) Only(ctx context.Context) (*UserMonthMessage, error) {
	nodes, err := ummq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{usermonthmessage.Label}
	default:
		return nil, &NotSingularError{usermonthmessage.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ummq *UserMonthMessageQuery) OnlyX(ctx context.Context) *UserMonthMessage {
	node, err := ummq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UserMonthMessage ID in the query.
// Returns a *NotSingularError when exactly one UserMonthMessage ID is not found.
// Returns a *NotFoundError when no entities are found.
func (ummq *UserMonthMessageQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ummq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{usermonthmessage.Label}
	default:
		err = &NotSingularError{usermonthmessage.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ummq *UserMonthMessageQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := ummq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UserMonthMessages.
func (ummq *UserMonthMessageQuery) All(ctx context.Context) ([]*UserMonthMessage, error) {
	if err := ummq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ummq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ummq *UserMonthMessageQuery) AllX(ctx context.Context) []*UserMonthMessage {
	nodes, err := ummq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UserMonthMessage IDs.
func (ummq *UserMonthMessageQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := ummq.Select(usermonthmessage.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ummq *UserMonthMessageQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := ummq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ummq *UserMonthMessageQuery) Count(ctx context.Context) (int, error) {
	if err := ummq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ummq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ummq *UserMonthMessageQuery) CountX(ctx context.Context) int {
	count, err := ummq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ummq *UserMonthMessageQuery) Exist(ctx context.Context) (bool, error) {
	if err := ummq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ummq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ummq *UserMonthMessageQuery) ExistX(ctx context.Context) bool {
	exist, err := ummq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserMonthMessageQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ummq *UserMonthMessageQuery) Clone() *UserMonthMessageQuery {
	if ummq == nil {
		return nil
	}
	return &UserMonthMessageQuery{
		config:         ummq.config,
		limit:          ummq.limit,
		offset:         ummq.offset,
		order:          append([]OrderFunc{}, ummq.order...),
		predicates:     append([]predicate.UserMonthMessage{}, ummq.predicates...),
		withProviderID: ummq.withProviderID.Clone(),
		withUserID:     ummq.withUserID.Clone(),
		// clone intermediate query.
		sql:  ummq.sql.Clone(),
		path: ummq.path,
	}
}

// WithProviderID tells the query-builder to eager-load the nodes that are connected to
// the "provider_id" edge. The optional arguments are used to configure the query builder of the edge.
func (ummq *UserMonthMessageQuery) WithProviderID(opts ...func(*ProvideQuery)) *UserMonthMessageQuery {
	query := &ProvideQuery{config: ummq.config}
	for _, opt := range opts {
		opt(query)
	}
	ummq.withProviderID = query
	return ummq
}

// WithUserID tells the query-builder to eager-load the nodes that are connected to
// the "user_id" edge. The optional arguments are used to configure the query builder of the edge.
func (ummq *UserMonthMessageQuery) WithUserID(opts ...func(*UserQuery)) *UserMonthMessageQuery {
	query := &UserQuery{config: ummq.config}
	for _, opt := range opts {
		opt(query)
	}
	ummq.withUserID = query
	return ummq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Month time.Time `json:"month,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserMonthMessage.Query().
//		GroupBy(usermonthmessage.FieldMonth).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (ummq *UserMonthMessageQuery) GroupBy(field string, fields ...string) *UserMonthMessageGroupBy {
	group := &UserMonthMessageGroupBy{config: ummq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ummq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ummq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Month time.Time `json:"month,omitempty"`
//	}
//
//	client.UserMonthMessage.Query().
//		Select(usermonthmessage.FieldMonth).
//		Scan(ctx, &v)
//
func (ummq *UserMonthMessageQuery) Select(field string, fields ...string) *UserMonthMessageSelect {
	ummq.fields = append([]string{field}, fields...)
	return &UserMonthMessageSelect{UserMonthMessageQuery: ummq}
}

func (ummq *UserMonthMessageQuery) prepareQuery(ctx context.Context) error {
	for _, f := range ummq.fields {
		if !usermonthmessage.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ummq.path != nil {
		prev, err := ummq.path(ctx)
		if err != nil {
			return err
		}
		ummq.sql = prev
	}
	return nil
}

func (ummq *UserMonthMessageQuery) sqlAll(ctx context.Context) ([]*UserMonthMessage, error) {
	var (
		nodes       = []*UserMonthMessage{}
		withFKs     = ummq.withFKs
		_spec       = ummq.querySpec()
		loadedTypes = [2]bool{
			ummq.withProviderID != nil,
			ummq.withUserID != nil,
		}
	)
	if ummq.withProviderID != nil || ummq.withUserID != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, usermonthmessage.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &UserMonthMessage{config: ummq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, ummq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := ummq.withProviderID; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*UserMonthMessage)
		for i := range nodes {
			fk := nodes[i].provider_id
			if fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(provide.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "provider_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ProviderID = n
			}
		}
	}

	if query := ummq.withUserID; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*UserMonthMessage)
		for i := range nodes {
			fk := nodes[i].user_id
			if fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(user.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.UserID = n
			}
		}
	}

	return nodes, nil
}

func (ummq *UserMonthMessageQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ummq.querySpec()
	return sqlgraph.CountNodes(ctx, ummq.driver, _spec)
}

func (ummq *UserMonthMessageQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := ummq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (ummq *UserMonthMessageQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   usermonthmessage.Table,
			Columns: usermonthmessage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: usermonthmessage.FieldID,
			},
		},
		From:   ummq.sql,
		Unique: true,
	}
	if fields := ummq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usermonthmessage.FieldID)
		for i := range fields {
			if fields[i] != usermonthmessage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ummq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ummq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ummq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ummq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, usermonthmessage.ValidColumn)
			}
		}
	}
	return _spec
}

func (ummq *UserMonthMessageQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ummq.driver.Dialect())
	t1 := builder.Table(usermonthmessage.Table)
	selector := builder.Select(t1.Columns(usermonthmessage.Columns...)...).From(t1)
	if ummq.sql != nil {
		selector = ummq.sql
		selector.Select(selector.Columns(usermonthmessage.Columns...)...)
	}
	for _, p := range ummq.predicates {
		p(selector)
	}
	for _, p := range ummq.order {
		p(selector, usermonthmessage.ValidColumn)
	}
	if offset := ummq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ummq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserMonthMessageGroupBy is the group-by builder for UserMonthMessage entities.
type UserMonthMessageGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ummgb *UserMonthMessageGroupBy) Aggregate(fns ...AggregateFunc) *UserMonthMessageGroupBy {
	ummgb.fns = append(ummgb.fns, fns...)
	return ummgb
}

// Scan applies the group-by query and scans the result into the given value.
func (ummgb *UserMonthMessageGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := ummgb.path(ctx)
	if err != nil {
		return err
	}
	ummgb.sql = query
	return ummgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ummgb *UserMonthMessageGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := ummgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (ummgb *UserMonthMessageGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(ummgb.fields) > 1 {
		return nil, errors.New("ent: UserMonthMessageGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := ummgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ummgb *UserMonthMessageGroupBy) StringsX(ctx context.Context) []string {
	v, err := ummgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ummgb *UserMonthMessageGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ummgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{usermonthmessage.Label}
	default:
		err = fmt.Errorf("ent: UserMonthMessageGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ummgb *UserMonthMessageGroupBy) StringX(ctx context.Context) string {
	v, err := ummgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (ummgb *UserMonthMessageGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(ummgb.fields) > 1 {
		return nil, errors.New("ent: UserMonthMessageGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := ummgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ummgb *UserMonthMessageGroupBy) IntsX(ctx context.Context) []int {
	v, err := ummgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ummgb *UserMonthMessageGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ummgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{usermonthmessage.Label}
	default:
		err = fmt.Errorf("ent: UserMonthMessageGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ummgb *UserMonthMessageGroupBy) IntX(ctx context.Context) int {
	v, err := ummgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (ummgb *UserMonthMessageGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(ummgb.fields) > 1 {
		return nil, errors.New("ent: UserMonthMessageGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := ummgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ummgb *UserMonthMessageGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := ummgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ummgb *UserMonthMessageGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ummgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{usermonthmessage.Label}
	default:
		err = fmt.Errorf("ent: UserMonthMessageGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ummgb *UserMonthMessageGroupBy) Float64X(ctx context.Context) float64 {
	v, err := ummgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (ummgb *UserMonthMessageGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(ummgb.fields) > 1 {
		return nil, errors.New("ent: UserMonthMessageGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := ummgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ummgb *UserMonthMessageGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := ummgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ummgb *UserMonthMessageGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ummgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{usermonthmessage.Label}
	default:
		err = fmt.Errorf("ent: UserMonthMessageGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ummgb *UserMonthMessageGroupBy) BoolX(ctx context.Context) bool {
	v, err := ummgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ummgb *UserMonthMessageGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range ummgb.fields {
		if !usermonthmessage.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ummgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ummgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ummgb *UserMonthMessageGroupBy) sqlQuery() *sql.Selector {
	selector := ummgb.sql
	columns := make([]string, 0, len(ummgb.fields)+len(ummgb.fns))
	columns = append(columns, ummgb.fields...)
	for _, fn := range ummgb.fns {
		columns = append(columns, fn(selector, usermonthmessage.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(ummgb.fields...)
}

// UserMonthMessageSelect is the builder for selecting fields of UserMonthMessage entities.
type UserMonthMessageSelect struct {
	*UserMonthMessageQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (umms *UserMonthMessageSelect) Scan(ctx context.Context, v interface{}) error {
	if err := umms.prepareQuery(ctx); err != nil {
		return err
	}
	umms.sql = umms.UserMonthMessageQuery.sqlQuery(ctx)
	return umms.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (umms *UserMonthMessageSelect) ScanX(ctx context.Context, v interface{}) {
	if err := umms.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (umms *UserMonthMessageSelect) Strings(ctx context.Context) ([]string, error) {
	if len(umms.fields) > 1 {
		return nil, errors.New("ent: UserMonthMessageSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := umms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (umms *UserMonthMessageSelect) StringsX(ctx context.Context) []string {
	v, err := umms.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (umms *UserMonthMessageSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = umms.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{usermonthmessage.Label}
	default:
		err = fmt.Errorf("ent: UserMonthMessageSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (umms *UserMonthMessageSelect) StringX(ctx context.Context) string {
	v, err := umms.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (umms *UserMonthMessageSelect) Ints(ctx context.Context) ([]int, error) {
	if len(umms.fields) > 1 {
		return nil, errors.New("ent: UserMonthMessageSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := umms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (umms *UserMonthMessageSelect) IntsX(ctx context.Context) []int {
	v, err := umms.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (umms *UserMonthMessageSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = umms.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{usermonthmessage.Label}
	default:
		err = fmt.Errorf("ent: UserMonthMessageSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (umms *UserMonthMessageSelect) IntX(ctx context.Context) int {
	v, err := umms.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (umms *UserMonthMessageSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(umms.fields) > 1 {
		return nil, errors.New("ent: UserMonthMessageSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := umms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (umms *UserMonthMessageSelect) Float64sX(ctx context.Context) []float64 {
	v, err := umms.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (umms *UserMonthMessageSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = umms.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{usermonthmessage.Label}
	default:
		err = fmt.Errorf("ent: UserMonthMessageSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (umms *UserMonthMessageSelect) Float64X(ctx context.Context) float64 {
	v, err := umms.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (umms *UserMonthMessageSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(umms.fields) > 1 {
		return nil, errors.New("ent: UserMonthMessageSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := umms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (umms *UserMonthMessageSelect) BoolsX(ctx context.Context) []bool {
	v, err := umms.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (umms *UserMonthMessageSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = umms.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{usermonthmessage.Label}
	default:
		err = fmt.Errorf("ent: UserMonthMessageSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (umms *UserMonthMessageSelect) BoolX(ctx context.Context) bool {
	v, err := umms.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (umms *UserMonthMessageSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := umms.sqlQuery().Query()
	if err := umms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (umms *UserMonthMessageSelect) sqlQuery() sql.Querier {
	selector := umms.sql
	selector.Select(selector.Columns(umms.fields...)...)
	return selector
}
