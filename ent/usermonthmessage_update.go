// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"smpp/ent/predicate"
	"smpp/ent/provide"
	"smpp/ent/user"
	"smpp/ent/usermonthmessage"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UserMonthMessageUpdate is the builder for updating UserMonthMessage entities.
type UserMonthMessageUpdate struct {
	config
	hooks    []Hook
	mutation *UserMonthMessageMutation
}

// Where adds a new predicate for the UserMonthMessageUpdate builder.
func (ummu *UserMonthMessageUpdate) Where(ps ...predicate.UserMonthMessage) *UserMonthMessageUpdate {
	ummu.mutation.predicates = append(ummu.mutation.predicates, ps...)
	return ummu
}

// SetMonth sets the "month" field.
func (ummu *UserMonthMessageUpdate) SetMonth(t time.Time) *UserMonthMessageUpdate {
	ummu.mutation.SetMonth(t)
	return ummu
}

// SetNillableMonth sets the "month" field if the given value is not nil.
func (ummu *UserMonthMessageUpdate) SetNillableMonth(t *time.Time) *UserMonthMessageUpdate {
	if t != nil {
		ummu.SetMonth(*t)
	}
	return ummu
}

// SetCreateAt sets the "create_at" field.
func (ummu *UserMonthMessageUpdate) SetCreateAt(t time.Time) *UserMonthMessageUpdate {
	ummu.mutation.SetCreateAt(t)
	return ummu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ummu *UserMonthMessageUpdate) SetNillableCreateAt(t *time.Time) *UserMonthMessageUpdate {
	if t != nil {
		ummu.SetCreateAt(*t)
	}
	return ummu
}

// SetUpdateAt sets the "update_at" field.
func (ummu *UserMonthMessageUpdate) SetUpdateAt(t time.Time) *UserMonthMessageUpdate {
	ummu.mutation.SetUpdateAt(t)
	return ummu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ummu *UserMonthMessageUpdate) SetNillableUpdateAt(t *time.Time) *UserMonthMessageUpdate {
	if t != nil {
		ummu.SetUpdateAt(*t)
	}
	return ummu
}

// SetProviderIDID sets the "provider_id" edge to the Provide entity by ID.
func (ummu *UserMonthMessageUpdate) SetProviderIDID(id uuid.UUID) *UserMonthMessageUpdate {
	ummu.mutation.SetProviderIDID(id)
	return ummu
}

// SetNillableProviderIDID sets the "provider_id" edge to the Provide entity by ID if the given value is not nil.
func (ummu *UserMonthMessageUpdate) SetNillableProviderIDID(id *uuid.UUID) *UserMonthMessageUpdate {
	if id != nil {
		ummu = ummu.SetProviderIDID(*id)
	}
	return ummu
}

// SetProviderID sets the "provider_id" edge to the Provide entity.
func (ummu *UserMonthMessageUpdate) SetProviderID(p *Provide) *UserMonthMessageUpdate {
	return ummu.SetProviderIDID(p.ID)
}

// SetUserIDID sets the "user_id" edge to the User entity by ID.
func (ummu *UserMonthMessageUpdate) SetUserIDID(id uuid.UUID) *UserMonthMessageUpdate {
	ummu.mutation.SetUserIDID(id)
	return ummu
}

// SetNillableUserIDID sets the "user_id" edge to the User entity by ID if the given value is not nil.
func (ummu *UserMonthMessageUpdate) SetNillableUserIDID(id *uuid.UUID) *UserMonthMessageUpdate {
	if id != nil {
		ummu = ummu.SetUserIDID(*id)
	}
	return ummu
}

// SetUserID sets the "user_id" edge to the User entity.
func (ummu *UserMonthMessageUpdate) SetUserID(u *User) *UserMonthMessageUpdate {
	return ummu.SetUserIDID(u.ID)
}

// Mutation returns the UserMonthMessageMutation object of the builder.
func (ummu *UserMonthMessageUpdate) Mutation() *UserMonthMessageMutation {
	return ummu.mutation
}

// ClearProviderID clears the "provider_id" edge to the Provide entity.
func (ummu *UserMonthMessageUpdate) ClearProviderID() *UserMonthMessageUpdate {
	ummu.mutation.ClearProviderID()
	return ummu
}

// ClearUserID clears the "user_id" edge to the User entity.
func (ummu *UserMonthMessageUpdate) ClearUserID() *UserMonthMessageUpdate {
	ummu.mutation.ClearUserID()
	return ummu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ummu *UserMonthMessageUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ummu.hooks) == 0 {
		affected, err = ummu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMonthMessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ummu.mutation = mutation
			affected, err = ummu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ummu.hooks) - 1; i >= 0; i-- {
			mut = ummu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ummu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ummu *UserMonthMessageUpdate) SaveX(ctx context.Context) int {
	affected, err := ummu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ummu *UserMonthMessageUpdate) Exec(ctx context.Context) error {
	_, err := ummu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ummu *UserMonthMessageUpdate) ExecX(ctx context.Context) {
	if err := ummu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ummu *UserMonthMessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   usermonthmessage.Table,
			Columns: usermonthmessage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: usermonthmessage.FieldID,
			},
		},
	}
	if ps := ummu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ummu.mutation.Month(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usermonthmessage.FieldMonth,
		})
	}
	if value, ok := ummu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usermonthmessage.FieldCreateAt,
		})
	}
	if value, ok := ummu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usermonthmessage.FieldUpdateAt,
		})
	}
	if ummu.mutation.ProviderIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermonthmessage.ProviderIDTable,
			Columns: []string{usermonthmessage.ProviderIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provide.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ummu.mutation.ProviderIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermonthmessage.ProviderIDTable,
			Columns: []string{usermonthmessage.ProviderIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provide.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ummu.mutation.UserIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermonthmessage.UserIDTable,
			Columns: []string{usermonthmessage.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ummu.mutation.UserIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermonthmessage.UserIDTable,
			Columns: []string{usermonthmessage.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ummu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usermonthmessage.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserMonthMessageUpdateOne is the builder for updating a single UserMonthMessage entity.
type UserMonthMessageUpdateOne struct {
	config
	hooks    []Hook
	mutation *UserMonthMessageMutation
}

// SetMonth sets the "month" field.
func (ummuo *UserMonthMessageUpdateOne) SetMonth(t time.Time) *UserMonthMessageUpdateOne {
	ummuo.mutation.SetMonth(t)
	return ummuo
}

// SetNillableMonth sets the "month" field if the given value is not nil.
func (ummuo *UserMonthMessageUpdateOne) SetNillableMonth(t *time.Time) *UserMonthMessageUpdateOne {
	if t != nil {
		ummuo.SetMonth(*t)
	}
	return ummuo
}

// SetCreateAt sets the "create_at" field.
func (ummuo *UserMonthMessageUpdateOne) SetCreateAt(t time.Time) *UserMonthMessageUpdateOne {
	ummuo.mutation.SetCreateAt(t)
	return ummuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ummuo *UserMonthMessageUpdateOne) SetNillableCreateAt(t *time.Time) *UserMonthMessageUpdateOne {
	if t != nil {
		ummuo.SetCreateAt(*t)
	}
	return ummuo
}

// SetUpdateAt sets the "update_at" field.
func (ummuo *UserMonthMessageUpdateOne) SetUpdateAt(t time.Time) *UserMonthMessageUpdateOne {
	ummuo.mutation.SetUpdateAt(t)
	return ummuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (ummuo *UserMonthMessageUpdateOne) SetNillableUpdateAt(t *time.Time) *UserMonthMessageUpdateOne {
	if t != nil {
		ummuo.SetUpdateAt(*t)
	}
	return ummuo
}

// SetProviderIDID sets the "provider_id" edge to the Provide entity by ID.
func (ummuo *UserMonthMessageUpdateOne) SetProviderIDID(id uuid.UUID) *UserMonthMessageUpdateOne {
	ummuo.mutation.SetProviderIDID(id)
	return ummuo
}

// SetNillableProviderIDID sets the "provider_id" edge to the Provide entity by ID if the given value is not nil.
func (ummuo *UserMonthMessageUpdateOne) SetNillableProviderIDID(id *uuid.UUID) *UserMonthMessageUpdateOne {
	if id != nil {
		ummuo = ummuo.SetProviderIDID(*id)
	}
	return ummuo
}

// SetProviderID sets the "provider_id" edge to the Provide entity.
func (ummuo *UserMonthMessageUpdateOne) SetProviderID(p *Provide) *UserMonthMessageUpdateOne {
	return ummuo.SetProviderIDID(p.ID)
}

// SetUserIDID sets the "user_id" edge to the User entity by ID.
func (ummuo *UserMonthMessageUpdateOne) SetUserIDID(id uuid.UUID) *UserMonthMessageUpdateOne {
	ummuo.mutation.SetUserIDID(id)
	return ummuo
}

// SetNillableUserIDID sets the "user_id" edge to the User entity by ID if the given value is not nil.
func (ummuo *UserMonthMessageUpdateOne) SetNillableUserIDID(id *uuid.UUID) *UserMonthMessageUpdateOne {
	if id != nil {
		ummuo = ummuo.SetUserIDID(*id)
	}
	return ummuo
}

// SetUserID sets the "user_id" edge to the User entity.
func (ummuo *UserMonthMessageUpdateOne) SetUserID(u *User) *UserMonthMessageUpdateOne {
	return ummuo.SetUserIDID(u.ID)
}

// Mutation returns the UserMonthMessageMutation object of the builder.
func (ummuo *UserMonthMessageUpdateOne) Mutation() *UserMonthMessageMutation {
	return ummuo.mutation
}

// ClearProviderID clears the "provider_id" edge to the Provide entity.
func (ummuo *UserMonthMessageUpdateOne) ClearProviderID() *UserMonthMessageUpdateOne {
	ummuo.mutation.ClearProviderID()
	return ummuo
}

// ClearUserID clears the "user_id" edge to the User entity.
func (ummuo *UserMonthMessageUpdateOne) ClearUserID() *UserMonthMessageUpdateOne {
	ummuo.mutation.ClearUserID()
	return ummuo
}

// Save executes the query and returns the updated UserMonthMessage entity.
func (ummuo *UserMonthMessageUpdateOne) Save(ctx context.Context) (*UserMonthMessage, error) {
	var (
		err  error
		node *UserMonthMessage
	)
	if len(ummuo.hooks) == 0 {
		node, err = ummuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMonthMessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ummuo.mutation = mutation
			node, err = ummuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ummuo.hooks) - 1; i >= 0; i-- {
			mut = ummuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ummuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ummuo *UserMonthMessageUpdateOne) SaveX(ctx context.Context) *UserMonthMessage {
	node, err := ummuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ummuo *UserMonthMessageUpdateOne) Exec(ctx context.Context) error {
	_, err := ummuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ummuo *UserMonthMessageUpdateOne) ExecX(ctx context.Context) {
	if err := ummuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ummuo *UserMonthMessageUpdateOne) sqlSave(ctx context.Context) (_node *UserMonthMessage, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   usermonthmessage.Table,
			Columns: usermonthmessage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: usermonthmessage.FieldID,
			},
		},
	}
	id, ok := ummuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing UserMonthMessage.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := ummuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ummuo.mutation.Month(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usermonthmessage.FieldMonth,
		})
	}
	if value, ok := ummuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usermonthmessage.FieldCreateAt,
		})
	}
	if value, ok := ummuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usermonthmessage.FieldUpdateAt,
		})
	}
	if ummuo.mutation.ProviderIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermonthmessage.ProviderIDTable,
			Columns: []string{usermonthmessage.ProviderIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provide.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ummuo.mutation.ProviderIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermonthmessage.ProviderIDTable,
			Columns: []string{usermonthmessage.ProviderIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: provide.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ummuo.mutation.UserIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermonthmessage.UserIDTable,
			Columns: []string{usermonthmessage.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ummuo.mutation.UserIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermonthmessage.UserIDTable,
			Columns: []string{usermonthmessage.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserMonthMessage{config: ummuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ummuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usermonthmessage.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
